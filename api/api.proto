// Copyright 2018 Samsung SDS Cloud Native Computing Team authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Michael Venezia <mvenezia@gmail.com>
// Alika Larsen <alika.larsen@gmail.com>

syntax = "proto3";

package cluster_manager_api;

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";


option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info: {
    title: "Cluster Manager API";
    version: "v0.2.0";
    contact: {
        name: "Samsung CNCT";
        url: "https://github.com/samsung-cnct/cluster-manager-api";
        email: "admin@samsung-cnct.io";
    };
  };
  external_docs: {
    url: "https://github.com/samsung-cnct/cluster-manager-api";
    description: "More about Cluster Manager API";
  }
  schemes: HTTPS;
  schemes: HTTP;
  consumes: "application/json";
  produces: "application/json";
};

service Cluster {
    // Will provision a cluster
    rpc CreateCluster (CreateClusterMsg) returns (CreateClusterReply) {
        option (google.api.http) = {
            post : "/api/v1/cluster"
            body : "*"
        };
    }
    // Will retrieve the status of a cluster and its kubeconfig for connectivity
    rpc GetCluster (GetClusterMsg) returns (GetClusterReply) {
        option (google.api.http) = {
            get : "/api/v1/cluster"
        };
    }
    // Will delete a cluster
    rpc DeleteCluster (DeleteClusterMsg) returns (DeleteClusterReply) {
        option (google.api.http) = {
            delete : "/api/v1/cluster"
        };
    }
    // Will adjust a provision a cluster
    rpc AdjustClusterNodes (AdjustClusterMsg) returns (AdjustClusterReply) {
        option (google.api.http) = {
            put : "/api/v1/cluster"
            body : "*"
        };
    }
    // Will retrieve a list of clusters
    rpc GetClusterList (GetClusterListMsg) returns (GetClusterListReply) {
        option (google.api.http) = {
            get : "/api/v1/cluster/list"
        };
    }
    // Will install (or reinstall) tiller
    rpc ProvisionTiller (ProvisionTillerMsg) returns (ProvisionTillerReply) {
        option (google.api.http) = {
            post : "/api/v1/tiller"
            body : "*"
        };
    }
    // Will install (or reinstall) helm chart
    // This will be destructive if a chart has already been deployed with the same name
    rpc InstallHelmChart (InstallHelmChartMsg) returns (InstallHelmChartReply) {
        option (google.api.http) = {
            post : "/api/v1/helm"
            body : "*"
        };
    }
    // Will delete deployed helm chart
    rpc DeleteHelmChart (DeleteHelmChartMsg) returns (DeleteHelmChartReply) {
        option (google.api.http) = {
            delete : "/api/v1/helm"
        };
    }
    // Will return version information about api server
    rpc GetVersionInformation (GetVersionMsg) returns (GetVersionReply) {
        option (google.api.http) = {
            get : "/api/v1/version"
        };
    }
    // Will return upgrade options for a given cluster
    rpc GetUpgradeClusterInformation (GetUpgradeClusterInformationMsg) returns (GetUpgradeClusterInformationReply) {
        option (google.api.http) = {
            get : "/api/v1/cluster/upgrade"
        };
    }
    // Will attempt to upgrade a cluster
    rpc UpgradeCluster (UpgradeClusterMsg) returns (UpgradeClusterReply) {
        option (google.api.http) = {
            put : "/api/v1/cluster/upgrade"
            body : "*"
        };
    }
    // Will update aws credentials used for a cluster
    rpc UpdateAWSCredentials (UpdateAWSCredentialsMsg) returns (UpdateAWSCredentialsReply) {
        option (google.api.http) = {
            put : "/api/v1/credentials/aws"
            body : "*"
        };
    }
    // Will update azure credentials used for a cluster
    rpc UpdateAzureCredentials (UpdateAzureCredentialsMsg) returns (UpdateAzureCredentialsReply) {
        option (google.api.http) = {
            put : "/api/v1/credentials/azure"
            body : "*"
        };
    }
}

enum Provider {
    undefined = 0;
    aws = 1;
    azure = 2;
    vmware = 3;
}

enum ClusterStatus {
    // Not set
    STATUS_UNSPECIFIED = 0;
    // The PROVISIONING state indicates the cluster is being created.
    PROVISIONING = 1;
    // The RUNNING state indicates the cluster has been created and is fully usable.
    RUNNING = 2;
    // The RECONCILING state indicates that some work is actively being done on the cluster, such as upgrading the master or node software.
    RECONCILING = 3;
    // The STOPPING state indicates the cluster is being deleted
    STOPPING = 4;
    // The ERROR state indicates the cluster may be unusable
    ERROR = 5;
    // The DEGRADED state indicates the cluster requires user action to restore full functionality
    DEGRADED = 6;
}

message Callback {
    // The URL to call back to
    string url = 1;
    // The ID of the request
    string request_id = 2;
}

message CreateClusterMsg {
    // Name of the cluster to be provisioned
    string name = 1;
    // The provider specification
    CreateClusterProviderSpec provider = 2;
    // Callback information
    Callback callback = 3;
}

message CreateClusterReply {
    // Whether or not the cluster was provisioned by this request
    bool ok = 1;
    // The details of the cluster request response
    ClusterItem cluster = 2;
}

message GetClusterMsg {
    // Name of the cluster to be looked up
    string name = 1;
    // AWS Credentials
    AWSCredentials aws = 2;
    // Azure Credentials
    AzureCredentials azure = 3;
    // Name of the providers (aws/azure/vmware/etc)
    Provider provider = 4;
}

message GetClusterReply {
    // Is the cluster in the system
    bool ok = 1;

    ClusterDetailItem cluster = 2;
}

message DeleteClusterMsg {
    // What is the cluster's name to destroy
    string name = 1;
    // AWS Credentials
    AWSCredentials aws = 2;
    // Azure Credentials
    AzureCredentials azure = 3;
    // Name of the providers (aws/azure/vmware/etc)
    Provider provider = 4;
    // Callback information
    Callback callback = 5;
}

message DeleteClusterReply {
    // Could the cluster be destroyed
    bool ok = 1;
    // Status of the request
    string status = 2;
}

message GetClusterListMsg {
    // AWS Credentials
    AWSCredentials aws = 1;
    // Azure Credentials
    AzureCredentials azure = 2;
    // Name of the providers (aws/azure/vmware/etc)
    Provider provider = 4;
}

message GetClusterListReply {
    // Is the cluster in the system
    bool ok = 1;
    // List of clusters
    repeated ClusterItem clusters = 2;
}

message ClusterItem {
    // ID of the cluster
    string id = 1;
    // Name of the cluster
    string name = 2;
    // Additional information about the status of the cluster
    string status_message = 3;
    // The status of the cluster
    ClusterStatus status = 4;
}

message ClusterDetailItem {
    // ID of the cluster
    string id = 1;
    // Name of the cluster
    string name = 2;
    // Additional information about the status of the cluster
    string status_message = 3;
    // What is the kubeconfig to connect to the cluster
    string kubeconfig = 4;
    // The status of the cluster
    ClusterStatus status = 5;
}

message CreateClusterProviderSpec {
    // What is the provider - currently this is aws or maas
    string name = 1;
    // The version of Kubernetes
    string k8s_version = 2;

    oneof provider_information {
        // The AWS specification
        CreateClusterAWSSpec aws = 3;
        CreateClusterAKSSpec azure = 4;
        CreateClusterVMWareSpec vmware = 7;
    }

    // Whether or not the cluster is HA
    bool high_availability = 5;
    // The fabric to be used
    string network_fabric = 6;

}

message CreateClusterAWSSpec {
    // The AWS Data Center
    AWSDataCenter data_center = 1;
    // Credentials to build the cluster
    AWSCredentials credentials = 2;
    // BYO items
    AWSPreconfiguredItems resources = 3;
    // Instance groups
    repeated AWSInstanceGroup instance_groups = 4;

    // Which Data Center
    message AWSDataCenter {
        // Which region (us-east-1, etc.)
        string region = 1;
        // Which availability zones (us-east-1b, us-east-2c, us-west-2d, etc.)
        repeated string availability_zones = 2;
    }

    // For when some things are already created
    message AWSPreconfiguredItems {
        // The VPC id, blank for for "create one for you", filled if you are BYO VPC
        string vpc_id = 1;
        // Security group
        string security_group_id = 2;
        // The IAM role for the cluster (arn)ClusterAssociationdd
        string iam_role_arn = 3;
    }

    // Instance groups define a type and number of instances
    message AWSInstanceGroup {
        // Instance type (m5.large, etc.)
        string type = 1;
        // Minimum number of instances (defaults to zero)
        int32 min_quantity = 2;
        // Maximum number of instances (defaults to zero)
        int32 max_quantity = 3;
    }
}

// Get version of API Server
message GetVersionMsg {
}

// Reply for version request
message GetVersionReply {
    // If operation was OK
    bool ok = 1;

    message VersionInformation {
        // The tag on the git repository
        string git_version = 1;
        // The hash of the git commit
        string git_commit = 2;
        // Whether or not the tree was clean when built
        string git_tree_state = 3;
        // Date of build
        string build_date = 4;
        // Version of go used to compile
        string go_version = 5;
        // Compiler used
        string compiler = 6;
        // Platform it was compiled for / running on
        string platform = 7;
    }

    // Version Information
    VersionInformation version_information = 2;
}

// The credentials to use for creating the cluster
message AWSCredentials {
    // The SecretKeyId for API Access
    string secret_key_id = 1;
    // The SecretAccessKey for API access
    string secret_access_key = 2;
    // The Region for API access
    string region = 3;
}


// The credentials to use for creating the cluster
message AzureCredentials {
    // The AppId for API Access
    string app_id = 1;
    // The Tenant for API access
    string tenant = 2;
    // The Password for API access
    string password = 3;
    // The Subscription for API access
    string subscription_id = 4;
}

// the account used by the cluster to create azure resources (ex: load balancer)
message AzureClusterServiceAccount {
    // The ClientId (aka: AppID)
    string client_id = 1;
    // The ClientSecret (aka: password)
    string client_secret = 2;
}
message CreateClusterAKSSpec {
    // The Azure Data Center
    string location = 1;
    // Credentials to build the cluster
    AzureCredentials credentials = 2;
    // Instance groups
    repeated AKSInstanceGroup instance_groups = 4;

    // Instance groups define a type and number of instances
    message AKSInstanceGroup {
        // The name of the group
        string name = 1;
        // Instance type (Standard_D2_v2, etc.)
        string type = 2;
        // Minimum number of instances (defaults to zero)
        int32 min_quantity = 3;
        // Maximum number of instances (defaults to zero)
        int32 max_quantity = 4;
    }
}

message CreateClusterVMWareSpec {
    // Machines which comprise the cluster
    repeated VMWareMachineSpec control_plane_nodes = 3;
    // Machines which comprise the cluster
    repeated VMWareMachineSpec worker_nodes = 4;
    // This should be a value like ip:port that will be a virtual IP/port
    // Passed back to external customers to be able to communicate to the cluster
    string api_endpoint = 5;
}

message KubernetesLabel {
    // The name of a label
    string name = 1;
    // The value of a label
    string value = 2;
}

// The specification for a specific node
message VMWareMachineSpec {
    // The username for SSH access
    string username = 1;
    // The host for SSH access
    string host = 2;
    // The port for SSH access
    int32 port = 3;
    // The k8s version for the control plane. This node is only a master if this field is defined.
    string password = 4;
    // The labels for the machines
    repeated KubernetesLabel labels = 5;
}

message ProvisionTillerMsg {
    // Name of the tiller / package manager
    string name = 10;
    // Cluster tiller should be installed on
    string cluster = 1;
    // Namespace tiller should be installed in
    string namespace = 2;
    // image (if not the default) for tiller (quay.io/someguy/tiller)
    string image = 11;
    // Version of tiller/helm to install / upgrade to (v2.11.0, etc)
    string version = 3;
    // Is the tiller a cluster-wide tiller?
    // Should it have cluster-wide admin privileges?
    bool cluster_wide = 4;
    // Namespaces that it should be able to admin on
    repeated string admin_namespaces = 5;
    // AWS Credentials
    AWSCredentials aws = 6;
    // Azure Credentials
    AzureCredentials azure = 7;
    // Name of the providers (aws/azure/vmware/etc)
    Provider provider = 8;
    // Callback information
    Callback callback = 9;
}

message ProvisionTillerReply {
    // Was the operation successful
    bool ok = 1;
    // What messages were given
    string message = 2;
}

message InstallHelmChartMsg {
    // Cluster tiller should be installed on
    string cluster = 1;
    // What tiller should be used
    string package_manger = 2;
    // Chart Settings
    GenericHelmChart chart = 3;
    // AWS Credentials
    AWSCredentials aws = 4;
    // Azure Credentials
    AzureCredentials azure = 5;
    // Name of the providers (aws/azure/vmware/etc)
    Provider provider = 6;
    // Callback information
    Callback callback = 7;
}

message InstallHelmChartReply {
    // Was the operation successful
    bool ok = 1;
    // What messages were given
    string message = 2;
}

message DeleteHelmChartMsg {
    // Cluster tiller should be installed on
    string cluster = 1;
    // What tiller should be used
    string package_manager = 2;
    // Chart Name
    string chart = 3;
    // AWS Credentials
    AWSCredentials aws = 4;
    // Azure Credentials
    AzureCredentials azure = 5;
    // Name of the providers (aws/azure/vmware/etc)
    Provider provider = 6;
    // A unique id to indicate this request
    string request_id = 7;
    // Callback information
    Callback callback = 8;
}

message DeleteHelmChartReply {
    // Was the operation successful
    bool ok = 1;
    // What messages were given
    string message = 2;
}

message GenericHelmChart {
    // What is the name of the deployment
    string name = 1;
    // What is the namespace to deploy the application to
    string namespace = 2;
    // What is the chart repository
    ChartRepository repo = 3;
    // What is the chart name
    string chart = 4;
    // What is the chart version
    string version = 5;
    // What are the options (nested yaml - the Values.yaml contents)
    string values = 6;
    // The payload of a chart (for airgapped solutions, etc)
    bytes chart_payload = 7;

    message ChartRepository {
        // What is the URL for the chart repo
        string url = 1;
        // What is the repo name
        string name = 2;
    }
}

message GetUpgradeClusterInformationMsg {
    // Name of the providers (aws/azure/vmware/etc)
    Provider provider = 1;
    // AWS Credentials
    AWSCredentials aws = 2;
    // Azure Credentials
    AzureCredentials azure = 3;
    // What is the cluster that we are considering for upgrade
    string name = 4;
}

message GetUpgradeClusterInformationReply {
    // Can the cluster be upgraded
    bool ok = 1;
    // What versions are possible right now
    repeated string versions = 2;
}

message UpgradeClusterMsg {
    // Name of the providers (aws/azure/vmware/etc)
    Provider provider = 1;
    // AWS Credentials
    AWSCredentials aws = 2;
    // Azure Credentials
    AzureCredentials azure = 3;
    // What is the cluster that we are considering for upgrade
    string name = 4;
    // What version are we upgrading to?
    string version = 5;
    // Callback information
    Callback callback = 6;
}

message UpgradeClusterReply {
    // Was this a successful request
    bool ok = 1;
}

message AdjustClusterMsg {
    // What is the cluster that we are considering for upgrade
    string name = 1;
    // Name of the providers (aws/azure/vmware/etc)
    Provider provider = 2;
    // AWS Credentials
    AWSCredentials aws = 3;
    // Provider changes
    oneof provider_changes {
        // The AWS specification
        //AdjustClusterAWSSpec aws = 5;
        AdjustClusterAKSSpec azure = 6;
        AdjustClusterVMWareSpec vmware = 7;
    }
    // Callback information
    Callback callback = 8;

    message AdjustClusterVMWareSpec {
        // Machines which we want to add to the cluster
        repeated VMWareMachineSpec add_nodes = 1;
        // Machines which we want to remove from the cluster
        repeated VMWareRemoveMachineSpec remove_nodes = 2;
    }

    message VMWareRemoveMachineSpec {
        // The host for SSH access
        string host = 1;
    }

    message AdjustClusterAKSSpec {
        // Credentials to build the cluster
        AzureCredentials credentials = 1;
        // Node Pool Name
        string node_pool = 2;
        // umber to increase by
        int32 add_count = 3;
        // number to decrease by
        int32 remove_count = 4;
    }

}

message AdjustClusterReply {
    // Was this a successful request
    bool ok = 1;
}

message UpdateAWSCredentialsMsg {
    // Cluster name
    string name = 1;
    // Credentials to build the cluster
    AWSCredentials credentials = 2;
}

message UpdateAWSCredentialsReply {
    // Was this a successful request
    bool ok = 1;
}

message UpdateAzureCredentialsMsg {
    // Cluster name
    string name = 1;
    // Credentials to build the cluster
    AzureCredentials credentials = 2;
}

message UpdateAzureCredentialsReply {
    // Was this a successful request
    bool ok = 1;
}

