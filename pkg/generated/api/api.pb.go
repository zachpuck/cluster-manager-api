// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package cluster_manager_api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Provider int32

const (
	Provider_undefined Provider = 0
	Provider_aws       Provider = 1
	Provider_azure     Provider = 2
	Provider_vmware    Provider = 3
)

var Provider_name = map[int32]string{
	0: "undefined",
	1: "aws",
	2: "azure",
	3: "vmware",
}
var Provider_value = map[string]int32{
	"undefined": 0,
	"aws":       1,
	"azure":     2,
	"vmware":    3,
}

func (x Provider) String() string {
	return proto.EnumName(Provider_name, int32(x))
}
func (Provider) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{0}
}

type ClusterStatus int32

const (
	// Not set
	ClusterStatus_STATUS_UNSPECIFIED ClusterStatus = 0
	// The PROVISIONING state indicates the cluster is being created.
	ClusterStatus_PROVISIONING ClusterStatus = 1
	// The RUNNING state indicates the cluster has been created and is fully usable.
	ClusterStatus_RUNNING ClusterStatus = 2
	// The RECONCILING state indicates that some work is actively being done on the cluster, such as upgrading the master or node software.
	ClusterStatus_RECONCILING ClusterStatus = 3
	// The STOPPING state indicates the cluster is being deleted
	ClusterStatus_STOPPING ClusterStatus = 4
	// The ERROR state indicates the cluster may be unusable
	ClusterStatus_ERROR ClusterStatus = 5
	// The DEGRADED state indicates the cluster requires user action to restore full functionality
	ClusterStatus_DEGRADED ClusterStatus = 6
)

var ClusterStatus_name = map[int32]string{
	0: "STATUS_UNSPECIFIED",
	1: "PROVISIONING",
	2: "RUNNING",
	3: "RECONCILING",
	4: "STOPPING",
	5: "ERROR",
	6: "DEGRADED",
}
var ClusterStatus_value = map[string]int32{
	"STATUS_UNSPECIFIED": 0,
	"PROVISIONING":       1,
	"RUNNING":            2,
	"RECONCILING":        3,
	"STOPPING":           4,
	"ERROR":              5,
	"DEGRADED":           6,
}

func (x ClusterStatus) String() string {
	return proto.EnumName(ClusterStatus_name, int32(x))
}
func (ClusterStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{1}
}

type Callback struct {
	// The URL to call back to
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// The ID of the request
	RequestId            string   `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Callback) Reset()         { *m = Callback{} }
func (m *Callback) String() string { return proto.CompactTextString(m) }
func (*Callback) ProtoMessage()    {}
func (*Callback) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{0}
}
func (m *Callback) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Callback.Unmarshal(m, b)
}
func (m *Callback) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Callback.Marshal(b, m, deterministic)
}
func (dst *Callback) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Callback.Merge(dst, src)
}
func (m *Callback) XXX_Size() int {
	return xxx_messageInfo_Callback.Size(m)
}
func (m *Callback) XXX_DiscardUnknown() {
	xxx_messageInfo_Callback.DiscardUnknown(m)
}

var xxx_messageInfo_Callback proto.InternalMessageInfo

func (m *Callback) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Callback) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

type CreateClusterMsg struct {
	// Name of the cluster to be provisioned
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The provider specification
	Provider *CreateClusterProviderSpec `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	// Callback information
	Callback             *Callback `protobuf:"bytes,3,opt,name=callback,proto3" json:"callback,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CreateClusterMsg) Reset()         { *m = CreateClusterMsg{} }
func (m *CreateClusterMsg) String() string { return proto.CompactTextString(m) }
func (*CreateClusterMsg) ProtoMessage()    {}
func (*CreateClusterMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{1}
}
func (m *CreateClusterMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateClusterMsg.Unmarshal(m, b)
}
func (m *CreateClusterMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateClusterMsg.Marshal(b, m, deterministic)
}
func (dst *CreateClusterMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateClusterMsg.Merge(dst, src)
}
func (m *CreateClusterMsg) XXX_Size() int {
	return xxx_messageInfo_CreateClusterMsg.Size(m)
}
func (m *CreateClusterMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateClusterMsg.DiscardUnknown(m)
}

var xxx_messageInfo_CreateClusterMsg proto.InternalMessageInfo

func (m *CreateClusterMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateClusterMsg) GetProvider() *CreateClusterProviderSpec {
	if m != nil {
		return m.Provider
	}
	return nil
}

func (m *CreateClusterMsg) GetCallback() *Callback {
	if m != nil {
		return m.Callback
	}
	return nil
}

type CreateClusterReply struct {
	// Whether or not the cluster was provisioned by this request
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	// The details of the cluster request response
	Cluster              *ClusterItem `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *CreateClusterReply) Reset()         { *m = CreateClusterReply{} }
func (m *CreateClusterReply) String() string { return proto.CompactTextString(m) }
func (*CreateClusterReply) ProtoMessage()    {}
func (*CreateClusterReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{2}
}
func (m *CreateClusterReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateClusterReply.Unmarshal(m, b)
}
func (m *CreateClusterReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateClusterReply.Marshal(b, m, deterministic)
}
func (dst *CreateClusterReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateClusterReply.Merge(dst, src)
}
func (m *CreateClusterReply) XXX_Size() int {
	return xxx_messageInfo_CreateClusterReply.Size(m)
}
func (m *CreateClusterReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateClusterReply.DiscardUnknown(m)
}

var xxx_messageInfo_CreateClusterReply proto.InternalMessageInfo

func (m *CreateClusterReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *CreateClusterReply) GetCluster() *ClusterItem {
	if m != nil {
		return m.Cluster
	}
	return nil
}

type GetClusterMsg struct {
	// Name of the cluster to be looked up
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// AWS Credentials
	Aws *AWSCredentials `protobuf:"bytes,2,opt,name=aws,proto3" json:"aws,omitempty"`
	// Azure Credentials
	Azure *AzureCredentials `protobuf:"bytes,3,opt,name=azure,proto3" json:"azure,omitempty"`
	// Name of the providers (aws/azure/vmware/etc)
	Provider             Provider `protobuf:"varint,4,opt,name=provider,proto3,enum=cluster_manager_api.Provider" json:"provider,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetClusterMsg) Reset()         { *m = GetClusterMsg{} }
func (m *GetClusterMsg) String() string { return proto.CompactTextString(m) }
func (*GetClusterMsg) ProtoMessage()    {}
func (*GetClusterMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{3}
}
func (m *GetClusterMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetClusterMsg.Unmarshal(m, b)
}
func (m *GetClusterMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetClusterMsg.Marshal(b, m, deterministic)
}
func (dst *GetClusterMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClusterMsg.Merge(dst, src)
}
func (m *GetClusterMsg) XXX_Size() int {
	return xxx_messageInfo_GetClusterMsg.Size(m)
}
func (m *GetClusterMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClusterMsg.DiscardUnknown(m)
}

var xxx_messageInfo_GetClusterMsg proto.InternalMessageInfo

func (m *GetClusterMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetClusterMsg) GetAws() *AWSCredentials {
	if m != nil {
		return m.Aws
	}
	return nil
}

func (m *GetClusterMsg) GetAzure() *AzureCredentials {
	if m != nil {
		return m.Azure
	}
	return nil
}

func (m *GetClusterMsg) GetProvider() Provider {
	if m != nil {
		return m.Provider
	}
	return Provider_undefined
}

type GetClusterReply struct {
	// Is the cluster in the system
	Ok                   bool               `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Cluster              *ClusterDetailItem `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GetClusterReply) Reset()         { *m = GetClusterReply{} }
func (m *GetClusterReply) String() string { return proto.CompactTextString(m) }
func (*GetClusterReply) ProtoMessage()    {}
func (*GetClusterReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{4}
}
func (m *GetClusterReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetClusterReply.Unmarshal(m, b)
}
func (m *GetClusterReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetClusterReply.Marshal(b, m, deterministic)
}
func (dst *GetClusterReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClusterReply.Merge(dst, src)
}
func (m *GetClusterReply) XXX_Size() int {
	return xxx_messageInfo_GetClusterReply.Size(m)
}
func (m *GetClusterReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClusterReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetClusterReply proto.InternalMessageInfo

func (m *GetClusterReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *GetClusterReply) GetCluster() *ClusterDetailItem {
	if m != nil {
		return m.Cluster
	}
	return nil
}

type DeleteClusterMsg struct {
	// What is the cluster's name to destroy
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// AWS Credentials
	Aws *AWSCredentials `protobuf:"bytes,2,opt,name=aws,proto3" json:"aws,omitempty"`
	// Azure Credentials
	Azure *AzureCredentials `protobuf:"bytes,3,opt,name=azure,proto3" json:"azure,omitempty"`
	// Name of the providers (aws/azure/vmware/etc)
	Provider Provider `protobuf:"varint,4,opt,name=provider,proto3,enum=cluster_manager_api.Provider" json:"provider,omitempty"`
	// Callback information
	Callback             *Callback `protobuf:"bytes,5,opt,name=callback,proto3" json:"callback,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *DeleteClusterMsg) Reset()         { *m = DeleteClusterMsg{} }
func (m *DeleteClusterMsg) String() string { return proto.CompactTextString(m) }
func (*DeleteClusterMsg) ProtoMessage()    {}
func (*DeleteClusterMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{5}
}
func (m *DeleteClusterMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteClusterMsg.Unmarshal(m, b)
}
func (m *DeleteClusterMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteClusterMsg.Marshal(b, m, deterministic)
}
func (dst *DeleteClusterMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteClusterMsg.Merge(dst, src)
}
func (m *DeleteClusterMsg) XXX_Size() int {
	return xxx_messageInfo_DeleteClusterMsg.Size(m)
}
func (m *DeleteClusterMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteClusterMsg.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteClusterMsg proto.InternalMessageInfo

func (m *DeleteClusterMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeleteClusterMsg) GetAws() *AWSCredentials {
	if m != nil {
		return m.Aws
	}
	return nil
}

func (m *DeleteClusterMsg) GetAzure() *AzureCredentials {
	if m != nil {
		return m.Azure
	}
	return nil
}

func (m *DeleteClusterMsg) GetProvider() Provider {
	if m != nil {
		return m.Provider
	}
	return Provider_undefined
}

func (m *DeleteClusterMsg) GetCallback() *Callback {
	if m != nil {
		return m.Callback
	}
	return nil
}

type DeleteClusterReply struct {
	// Could the cluster be destroyed
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	// Status of the request
	Status               string   `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteClusterReply) Reset()         { *m = DeleteClusterReply{} }
func (m *DeleteClusterReply) String() string { return proto.CompactTextString(m) }
func (*DeleteClusterReply) ProtoMessage()    {}
func (*DeleteClusterReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{6}
}
func (m *DeleteClusterReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteClusterReply.Unmarshal(m, b)
}
func (m *DeleteClusterReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteClusterReply.Marshal(b, m, deterministic)
}
func (dst *DeleteClusterReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteClusterReply.Merge(dst, src)
}
func (m *DeleteClusterReply) XXX_Size() int {
	return xxx_messageInfo_DeleteClusterReply.Size(m)
}
func (m *DeleteClusterReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteClusterReply.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteClusterReply proto.InternalMessageInfo

func (m *DeleteClusterReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *DeleteClusterReply) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type GetClusterListMsg struct {
	// AWS Credentials
	Aws *AWSCredentials `protobuf:"bytes,1,opt,name=aws,proto3" json:"aws,omitempty"`
	// Azure Credentials
	Azure *AzureCredentials `protobuf:"bytes,2,opt,name=azure,proto3" json:"azure,omitempty"`
	// Name of the providers (aws/azure/vmware/etc)
	Provider             Provider `protobuf:"varint,4,opt,name=provider,proto3,enum=cluster_manager_api.Provider" json:"provider,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetClusterListMsg) Reset()         { *m = GetClusterListMsg{} }
func (m *GetClusterListMsg) String() string { return proto.CompactTextString(m) }
func (*GetClusterListMsg) ProtoMessage()    {}
func (*GetClusterListMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{7}
}
func (m *GetClusterListMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetClusterListMsg.Unmarshal(m, b)
}
func (m *GetClusterListMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetClusterListMsg.Marshal(b, m, deterministic)
}
func (dst *GetClusterListMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClusterListMsg.Merge(dst, src)
}
func (m *GetClusterListMsg) XXX_Size() int {
	return xxx_messageInfo_GetClusterListMsg.Size(m)
}
func (m *GetClusterListMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClusterListMsg.DiscardUnknown(m)
}

var xxx_messageInfo_GetClusterListMsg proto.InternalMessageInfo

func (m *GetClusterListMsg) GetAws() *AWSCredentials {
	if m != nil {
		return m.Aws
	}
	return nil
}

func (m *GetClusterListMsg) GetAzure() *AzureCredentials {
	if m != nil {
		return m.Azure
	}
	return nil
}

func (m *GetClusterListMsg) GetProvider() Provider {
	if m != nil {
		return m.Provider
	}
	return Provider_undefined
}

type GetClusterListReply struct {
	// Is the cluster in the system
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	// List of clusters
	Clusters             []*ClusterItem `protobuf:"bytes,2,rep,name=clusters,proto3" json:"clusters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetClusterListReply) Reset()         { *m = GetClusterListReply{} }
func (m *GetClusterListReply) String() string { return proto.CompactTextString(m) }
func (*GetClusterListReply) ProtoMessage()    {}
func (*GetClusterListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{8}
}
func (m *GetClusterListReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetClusterListReply.Unmarshal(m, b)
}
func (m *GetClusterListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetClusterListReply.Marshal(b, m, deterministic)
}
func (dst *GetClusterListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClusterListReply.Merge(dst, src)
}
func (m *GetClusterListReply) XXX_Size() int {
	return xxx_messageInfo_GetClusterListReply.Size(m)
}
func (m *GetClusterListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClusterListReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetClusterListReply proto.InternalMessageInfo

func (m *GetClusterListReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *GetClusterListReply) GetClusters() []*ClusterItem {
	if m != nil {
		return m.Clusters
	}
	return nil
}

type ClusterItem struct {
	// ID of the cluster
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the cluster
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Additional information about the status of the cluster
	StatusMessage string `protobuf:"bytes,3,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	// The status of the cluster
	Status               ClusterStatus `protobuf:"varint,4,opt,name=status,proto3,enum=cluster_manager_api.ClusterStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ClusterItem) Reset()         { *m = ClusterItem{} }
func (m *ClusterItem) String() string { return proto.CompactTextString(m) }
func (*ClusterItem) ProtoMessage()    {}
func (*ClusterItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{9}
}
func (m *ClusterItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterItem.Unmarshal(m, b)
}
func (m *ClusterItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterItem.Marshal(b, m, deterministic)
}
func (dst *ClusterItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterItem.Merge(dst, src)
}
func (m *ClusterItem) XXX_Size() int {
	return xxx_messageInfo_ClusterItem.Size(m)
}
func (m *ClusterItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterItem.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterItem proto.InternalMessageInfo

func (m *ClusterItem) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ClusterItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClusterItem) GetStatusMessage() string {
	if m != nil {
		return m.StatusMessage
	}
	return ""
}

func (m *ClusterItem) GetStatus() ClusterStatus {
	if m != nil {
		return m.Status
	}
	return ClusterStatus_STATUS_UNSPECIFIED
}

type ClusterDetailItem struct {
	// ID of the cluster
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the cluster
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Additional information about the status of the cluster
	StatusMessage string `protobuf:"bytes,3,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	// What is the kubeconfig to connect to the cluster
	Kubeconfig string `protobuf:"bytes,4,opt,name=kubeconfig,proto3" json:"kubeconfig,omitempty"`
	// The status of the cluster
	Status               ClusterStatus `protobuf:"varint,5,opt,name=status,proto3,enum=cluster_manager_api.ClusterStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ClusterDetailItem) Reset()         { *m = ClusterDetailItem{} }
func (m *ClusterDetailItem) String() string { return proto.CompactTextString(m) }
func (*ClusterDetailItem) ProtoMessage()    {}
func (*ClusterDetailItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{10}
}
func (m *ClusterDetailItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterDetailItem.Unmarshal(m, b)
}
func (m *ClusterDetailItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterDetailItem.Marshal(b, m, deterministic)
}
func (dst *ClusterDetailItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterDetailItem.Merge(dst, src)
}
func (m *ClusterDetailItem) XXX_Size() int {
	return xxx_messageInfo_ClusterDetailItem.Size(m)
}
func (m *ClusterDetailItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterDetailItem.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterDetailItem proto.InternalMessageInfo

func (m *ClusterDetailItem) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ClusterDetailItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClusterDetailItem) GetStatusMessage() string {
	if m != nil {
		return m.StatusMessage
	}
	return ""
}

func (m *ClusterDetailItem) GetKubeconfig() string {
	if m != nil {
		return m.Kubeconfig
	}
	return ""
}

func (m *ClusterDetailItem) GetStatus() ClusterStatus {
	if m != nil {
		return m.Status
	}
	return ClusterStatus_STATUS_UNSPECIFIED
}

type CreateClusterProviderSpec struct {
	// What is the provider - currently this is aws or maas
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The version of Kubernetes
	K8SVersion string `protobuf:"bytes,2,opt,name=k8s_version,json=k8sVersion,proto3" json:"k8s_version,omitempty"`
	// Types that are valid to be assigned to ProviderInformation:
	//	*CreateClusterProviderSpec_Aws
	//	*CreateClusterProviderSpec_Azure
	//	*CreateClusterProviderSpec_Vmware
	ProviderInformation isCreateClusterProviderSpec_ProviderInformation `protobuf_oneof:"provider_information"`
	// Whether or not the cluster is HA
	HighAvailability bool `protobuf:"varint,5,opt,name=high_availability,json=highAvailability,proto3" json:"high_availability,omitempty"`
	// The fabric to be used
	NetworkFabric        string   `protobuf:"bytes,6,opt,name=network_fabric,json=networkFabric,proto3" json:"network_fabric,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateClusterProviderSpec) Reset()         { *m = CreateClusterProviderSpec{} }
func (m *CreateClusterProviderSpec) String() string { return proto.CompactTextString(m) }
func (*CreateClusterProviderSpec) ProtoMessage()    {}
func (*CreateClusterProviderSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{11}
}
func (m *CreateClusterProviderSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateClusterProviderSpec.Unmarshal(m, b)
}
func (m *CreateClusterProviderSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateClusterProviderSpec.Marshal(b, m, deterministic)
}
func (dst *CreateClusterProviderSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateClusterProviderSpec.Merge(dst, src)
}
func (m *CreateClusterProviderSpec) XXX_Size() int {
	return xxx_messageInfo_CreateClusterProviderSpec.Size(m)
}
func (m *CreateClusterProviderSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateClusterProviderSpec.DiscardUnknown(m)
}

var xxx_messageInfo_CreateClusterProviderSpec proto.InternalMessageInfo

func (m *CreateClusterProviderSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateClusterProviderSpec) GetK8SVersion() string {
	if m != nil {
		return m.K8SVersion
	}
	return ""
}

type isCreateClusterProviderSpec_ProviderInformation interface {
	isCreateClusterProviderSpec_ProviderInformation()
}

type CreateClusterProviderSpec_Aws struct {
	Aws *CreateClusterAWSSpec `protobuf:"bytes,3,opt,name=aws,proto3,oneof"`
}

type CreateClusterProviderSpec_Azure struct {
	Azure *CreateClusterAKSSpec `protobuf:"bytes,4,opt,name=azure,proto3,oneof"`
}

type CreateClusterProviderSpec_Vmware struct {
	Vmware *CreateClusterVMWareSpec `protobuf:"bytes,7,opt,name=vmware,proto3,oneof"`
}

func (*CreateClusterProviderSpec_Aws) isCreateClusterProviderSpec_ProviderInformation() {}

func (*CreateClusterProviderSpec_Azure) isCreateClusterProviderSpec_ProviderInformation() {}

func (*CreateClusterProviderSpec_Vmware) isCreateClusterProviderSpec_ProviderInformation() {}

func (m *CreateClusterProviderSpec) GetProviderInformation() isCreateClusterProviderSpec_ProviderInformation {
	if m != nil {
		return m.ProviderInformation
	}
	return nil
}

func (m *CreateClusterProviderSpec) GetAws() *CreateClusterAWSSpec {
	if x, ok := m.GetProviderInformation().(*CreateClusterProviderSpec_Aws); ok {
		return x.Aws
	}
	return nil
}

func (m *CreateClusterProviderSpec) GetAzure() *CreateClusterAKSSpec {
	if x, ok := m.GetProviderInformation().(*CreateClusterProviderSpec_Azure); ok {
		return x.Azure
	}
	return nil
}

func (m *CreateClusterProviderSpec) GetVmware() *CreateClusterVMWareSpec {
	if x, ok := m.GetProviderInformation().(*CreateClusterProviderSpec_Vmware); ok {
		return x.Vmware
	}
	return nil
}

func (m *CreateClusterProviderSpec) GetHighAvailability() bool {
	if m != nil {
		return m.HighAvailability
	}
	return false
}

func (m *CreateClusterProviderSpec) GetNetworkFabric() string {
	if m != nil {
		return m.NetworkFabric
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CreateClusterProviderSpec) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CreateClusterProviderSpec_OneofMarshaler, _CreateClusterProviderSpec_OneofUnmarshaler, _CreateClusterProviderSpec_OneofSizer, []interface{}{
		(*CreateClusterProviderSpec_Aws)(nil),
		(*CreateClusterProviderSpec_Azure)(nil),
		(*CreateClusterProviderSpec_Vmware)(nil),
	}
}

func _CreateClusterProviderSpec_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CreateClusterProviderSpec)
	// provider_information
	switch x := m.ProviderInformation.(type) {
	case *CreateClusterProviderSpec_Aws:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Aws); err != nil {
			return err
		}
	case *CreateClusterProviderSpec_Azure:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Azure); err != nil {
			return err
		}
	case *CreateClusterProviderSpec_Vmware:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Vmware); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateClusterProviderSpec.ProviderInformation has unexpected type %T", x)
	}
	return nil
}

func _CreateClusterProviderSpec_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CreateClusterProviderSpec)
	switch tag {
	case 3: // provider_information.aws
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CreateClusterAWSSpec)
		err := b.DecodeMessage(msg)
		m.ProviderInformation = &CreateClusterProviderSpec_Aws{msg}
		return true, err
	case 4: // provider_information.azure
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CreateClusterAKSSpec)
		err := b.DecodeMessage(msg)
		m.ProviderInformation = &CreateClusterProviderSpec_Azure{msg}
		return true, err
	case 7: // provider_information.vmware
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CreateClusterVMWareSpec)
		err := b.DecodeMessage(msg)
		m.ProviderInformation = &CreateClusterProviderSpec_Vmware{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CreateClusterProviderSpec_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CreateClusterProviderSpec)
	// provider_information
	switch x := m.ProviderInformation.(type) {
	case *CreateClusterProviderSpec_Aws:
		s := proto.Size(x.Aws)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateClusterProviderSpec_Azure:
		s := proto.Size(x.Azure)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CreateClusterProviderSpec_Vmware:
		s := proto.Size(x.Vmware)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CreateClusterAWSSpec struct {
	// The AWS Data Center
	DataCenter *CreateClusterAWSSpec_AWSDataCenter `protobuf:"bytes,1,opt,name=data_center,json=dataCenter,proto3" json:"data_center,omitempty"`
	// Credentials to build the cluster
	Credentials *AWSCredentials `protobuf:"bytes,2,opt,name=credentials,proto3" json:"credentials,omitempty"`
	// BYO items
	Resources *CreateClusterAWSSpec_AWSPreconfiguredItems `protobuf:"bytes,3,opt,name=resources,proto3" json:"resources,omitempty"`
	// Instance groups
	InstanceGroups       []*CreateClusterAWSSpec_AWSInstanceGroup `protobuf:"bytes,4,rep,name=instance_groups,json=instanceGroups,proto3" json:"instance_groups,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                 `json:"-"`
	XXX_unrecognized     []byte                                   `json:"-"`
	XXX_sizecache        int32                                    `json:"-"`
}

func (m *CreateClusterAWSSpec) Reset()         { *m = CreateClusterAWSSpec{} }
func (m *CreateClusterAWSSpec) String() string { return proto.CompactTextString(m) }
func (*CreateClusterAWSSpec) ProtoMessage()    {}
func (*CreateClusterAWSSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{12}
}
func (m *CreateClusterAWSSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateClusterAWSSpec.Unmarshal(m, b)
}
func (m *CreateClusterAWSSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateClusterAWSSpec.Marshal(b, m, deterministic)
}
func (dst *CreateClusterAWSSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateClusterAWSSpec.Merge(dst, src)
}
func (m *CreateClusterAWSSpec) XXX_Size() int {
	return xxx_messageInfo_CreateClusterAWSSpec.Size(m)
}
func (m *CreateClusterAWSSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateClusterAWSSpec.DiscardUnknown(m)
}

var xxx_messageInfo_CreateClusterAWSSpec proto.InternalMessageInfo

func (m *CreateClusterAWSSpec) GetDataCenter() *CreateClusterAWSSpec_AWSDataCenter {
	if m != nil {
		return m.DataCenter
	}
	return nil
}

func (m *CreateClusterAWSSpec) GetCredentials() *AWSCredentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

func (m *CreateClusterAWSSpec) GetResources() *CreateClusterAWSSpec_AWSPreconfiguredItems {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *CreateClusterAWSSpec) GetInstanceGroups() []*CreateClusterAWSSpec_AWSInstanceGroup {
	if m != nil {
		return m.InstanceGroups
	}
	return nil
}

// Which Data Center
type CreateClusterAWSSpec_AWSDataCenter struct {
	// Which region (us-east-1, etc.)
	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	// Which availability zones (us-east-1b, us-east-2c, us-west-2d, etc.)
	AvailabilityZones    []string `protobuf:"bytes,2,rep,name=availability_zones,json=availabilityZones,proto3" json:"availability_zones,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateClusterAWSSpec_AWSDataCenter) Reset()         { *m = CreateClusterAWSSpec_AWSDataCenter{} }
func (m *CreateClusterAWSSpec_AWSDataCenter) String() string { return proto.CompactTextString(m) }
func (*CreateClusterAWSSpec_AWSDataCenter) ProtoMessage()    {}
func (*CreateClusterAWSSpec_AWSDataCenter) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{12, 0}
}
func (m *CreateClusterAWSSpec_AWSDataCenter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateClusterAWSSpec_AWSDataCenter.Unmarshal(m, b)
}
func (m *CreateClusterAWSSpec_AWSDataCenter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateClusterAWSSpec_AWSDataCenter.Marshal(b, m, deterministic)
}
func (dst *CreateClusterAWSSpec_AWSDataCenter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateClusterAWSSpec_AWSDataCenter.Merge(dst, src)
}
func (m *CreateClusterAWSSpec_AWSDataCenter) XXX_Size() int {
	return xxx_messageInfo_CreateClusterAWSSpec_AWSDataCenter.Size(m)
}
func (m *CreateClusterAWSSpec_AWSDataCenter) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateClusterAWSSpec_AWSDataCenter.DiscardUnknown(m)
}

var xxx_messageInfo_CreateClusterAWSSpec_AWSDataCenter proto.InternalMessageInfo

func (m *CreateClusterAWSSpec_AWSDataCenter) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *CreateClusterAWSSpec_AWSDataCenter) GetAvailabilityZones() []string {
	if m != nil {
		return m.AvailabilityZones
	}
	return nil
}

// For when some things are already created
type CreateClusterAWSSpec_AWSPreconfiguredItems struct {
	// The VPC id, blank for for "create one for you", filled if you are BYO VPC
	VpcId string `protobuf:"bytes,1,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	// Security group
	SecurityGroupId string `protobuf:"bytes,2,opt,name=security_group_id,json=securityGroupId,proto3" json:"security_group_id,omitempty"`
	// The IAM role for the cluster (arn)ClusterAssociationdd
	IamRoleArn           string   `protobuf:"bytes,3,opt,name=iam_role_arn,json=iamRoleArn,proto3" json:"iam_role_arn,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateClusterAWSSpec_AWSPreconfiguredItems) Reset() {
	*m = CreateClusterAWSSpec_AWSPreconfiguredItems{}
}
func (m *CreateClusterAWSSpec_AWSPreconfiguredItems) String() string {
	return proto.CompactTextString(m)
}
func (*CreateClusterAWSSpec_AWSPreconfiguredItems) ProtoMessage() {}
func (*CreateClusterAWSSpec_AWSPreconfiguredItems) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{12, 1}
}
func (m *CreateClusterAWSSpec_AWSPreconfiguredItems) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateClusterAWSSpec_AWSPreconfiguredItems.Unmarshal(m, b)
}
func (m *CreateClusterAWSSpec_AWSPreconfiguredItems) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateClusterAWSSpec_AWSPreconfiguredItems.Marshal(b, m, deterministic)
}
func (dst *CreateClusterAWSSpec_AWSPreconfiguredItems) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateClusterAWSSpec_AWSPreconfiguredItems.Merge(dst, src)
}
func (m *CreateClusterAWSSpec_AWSPreconfiguredItems) XXX_Size() int {
	return xxx_messageInfo_CreateClusterAWSSpec_AWSPreconfiguredItems.Size(m)
}
func (m *CreateClusterAWSSpec_AWSPreconfiguredItems) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateClusterAWSSpec_AWSPreconfiguredItems.DiscardUnknown(m)
}

var xxx_messageInfo_CreateClusterAWSSpec_AWSPreconfiguredItems proto.InternalMessageInfo

func (m *CreateClusterAWSSpec_AWSPreconfiguredItems) GetVpcId() string {
	if m != nil {
		return m.VpcId
	}
	return ""
}

func (m *CreateClusterAWSSpec_AWSPreconfiguredItems) GetSecurityGroupId() string {
	if m != nil {
		return m.SecurityGroupId
	}
	return ""
}

func (m *CreateClusterAWSSpec_AWSPreconfiguredItems) GetIamRoleArn() string {
	if m != nil {
		return m.IamRoleArn
	}
	return ""
}

// Instance groups define a type and number of instances
type CreateClusterAWSSpec_AWSInstanceGroup struct {
	// Instance type (m5.large, etc.)
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Minimum number of instances (defaults to zero)
	MinQuantity int32 `protobuf:"varint,2,opt,name=min_quantity,json=minQuantity,proto3" json:"min_quantity,omitempty"`
	// Maximum number of instances (defaults to zero)
	MaxQuantity          int32    `protobuf:"varint,3,opt,name=max_quantity,json=maxQuantity,proto3" json:"max_quantity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateClusterAWSSpec_AWSInstanceGroup) Reset()         { *m = CreateClusterAWSSpec_AWSInstanceGroup{} }
func (m *CreateClusterAWSSpec_AWSInstanceGroup) String() string { return proto.CompactTextString(m) }
func (*CreateClusterAWSSpec_AWSInstanceGroup) ProtoMessage()    {}
func (*CreateClusterAWSSpec_AWSInstanceGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{12, 2}
}
func (m *CreateClusterAWSSpec_AWSInstanceGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateClusterAWSSpec_AWSInstanceGroup.Unmarshal(m, b)
}
func (m *CreateClusterAWSSpec_AWSInstanceGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateClusterAWSSpec_AWSInstanceGroup.Marshal(b, m, deterministic)
}
func (dst *CreateClusterAWSSpec_AWSInstanceGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateClusterAWSSpec_AWSInstanceGroup.Merge(dst, src)
}
func (m *CreateClusterAWSSpec_AWSInstanceGroup) XXX_Size() int {
	return xxx_messageInfo_CreateClusterAWSSpec_AWSInstanceGroup.Size(m)
}
func (m *CreateClusterAWSSpec_AWSInstanceGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateClusterAWSSpec_AWSInstanceGroup.DiscardUnknown(m)
}

var xxx_messageInfo_CreateClusterAWSSpec_AWSInstanceGroup proto.InternalMessageInfo

func (m *CreateClusterAWSSpec_AWSInstanceGroup) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *CreateClusterAWSSpec_AWSInstanceGroup) GetMinQuantity() int32 {
	if m != nil {
		return m.MinQuantity
	}
	return 0
}

func (m *CreateClusterAWSSpec_AWSInstanceGroup) GetMaxQuantity() int32 {
	if m != nil {
		return m.MaxQuantity
	}
	return 0
}

// Get version of API Server
type GetVersionMsg struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVersionMsg) Reset()         { *m = GetVersionMsg{} }
func (m *GetVersionMsg) String() string { return proto.CompactTextString(m) }
func (*GetVersionMsg) ProtoMessage()    {}
func (*GetVersionMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{13}
}
func (m *GetVersionMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVersionMsg.Unmarshal(m, b)
}
func (m *GetVersionMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVersionMsg.Marshal(b, m, deterministic)
}
func (dst *GetVersionMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVersionMsg.Merge(dst, src)
}
func (m *GetVersionMsg) XXX_Size() int {
	return xxx_messageInfo_GetVersionMsg.Size(m)
}
func (m *GetVersionMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVersionMsg.DiscardUnknown(m)
}

var xxx_messageInfo_GetVersionMsg proto.InternalMessageInfo

// Reply for version request
type GetVersionReply struct {
	// If operation was OK
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	// Version Information
	VersionInformation   *GetVersionReply_VersionInformation `protobuf:"bytes,2,opt,name=version_information,json=versionInformation,proto3" json:"version_information,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *GetVersionReply) Reset()         { *m = GetVersionReply{} }
func (m *GetVersionReply) String() string { return proto.CompactTextString(m) }
func (*GetVersionReply) ProtoMessage()    {}
func (*GetVersionReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{14}
}
func (m *GetVersionReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVersionReply.Unmarshal(m, b)
}
func (m *GetVersionReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVersionReply.Marshal(b, m, deterministic)
}
func (dst *GetVersionReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVersionReply.Merge(dst, src)
}
func (m *GetVersionReply) XXX_Size() int {
	return xxx_messageInfo_GetVersionReply.Size(m)
}
func (m *GetVersionReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVersionReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetVersionReply proto.InternalMessageInfo

func (m *GetVersionReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *GetVersionReply) GetVersionInformation() *GetVersionReply_VersionInformation {
	if m != nil {
		return m.VersionInformation
	}
	return nil
}

type GetVersionReply_VersionInformation struct {
	// The tag on the git repository
	GitVersion string `protobuf:"bytes,1,opt,name=git_version,json=gitVersion,proto3" json:"git_version,omitempty"`
	// The hash of the git commit
	GitCommit string `protobuf:"bytes,2,opt,name=git_commit,json=gitCommit,proto3" json:"git_commit,omitempty"`
	// Whether or not the tree was clean when built
	GitTreeState string `protobuf:"bytes,3,opt,name=git_tree_state,json=gitTreeState,proto3" json:"git_tree_state,omitempty"`
	// Date of build
	BuildDate string `protobuf:"bytes,4,opt,name=build_date,json=buildDate,proto3" json:"build_date,omitempty"`
	// Version of go used to compile
	GoVersion string `protobuf:"bytes,5,opt,name=go_version,json=goVersion,proto3" json:"go_version,omitempty"`
	// Compiler used
	Compiler string `protobuf:"bytes,6,opt,name=compiler,proto3" json:"compiler,omitempty"`
	// Platform it was compiled for / running on
	Platform             string   `protobuf:"bytes,7,opt,name=platform,proto3" json:"platform,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVersionReply_VersionInformation) Reset()         { *m = GetVersionReply_VersionInformation{} }
func (m *GetVersionReply_VersionInformation) String() string { return proto.CompactTextString(m) }
func (*GetVersionReply_VersionInformation) ProtoMessage()    {}
func (*GetVersionReply_VersionInformation) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{14, 0}
}
func (m *GetVersionReply_VersionInformation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVersionReply_VersionInformation.Unmarshal(m, b)
}
func (m *GetVersionReply_VersionInformation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVersionReply_VersionInformation.Marshal(b, m, deterministic)
}
func (dst *GetVersionReply_VersionInformation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVersionReply_VersionInformation.Merge(dst, src)
}
func (m *GetVersionReply_VersionInformation) XXX_Size() int {
	return xxx_messageInfo_GetVersionReply_VersionInformation.Size(m)
}
func (m *GetVersionReply_VersionInformation) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVersionReply_VersionInformation.DiscardUnknown(m)
}

var xxx_messageInfo_GetVersionReply_VersionInformation proto.InternalMessageInfo

func (m *GetVersionReply_VersionInformation) GetGitVersion() string {
	if m != nil {
		return m.GitVersion
	}
	return ""
}

func (m *GetVersionReply_VersionInformation) GetGitCommit() string {
	if m != nil {
		return m.GitCommit
	}
	return ""
}

func (m *GetVersionReply_VersionInformation) GetGitTreeState() string {
	if m != nil {
		return m.GitTreeState
	}
	return ""
}

func (m *GetVersionReply_VersionInformation) GetBuildDate() string {
	if m != nil {
		return m.BuildDate
	}
	return ""
}

func (m *GetVersionReply_VersionInformation) GetGoVersion() string {
	if m != nil {
		return m.GoVersion
	}
	return ""
}

func (m *GetVersionReply_VersionInformation) GetCompiler() string {
	if m != nil {
		return m.Compiler
	}
	return ""
}

func (m *GetVersionReply_VersionInformation) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

// The credentials to use for creating the cluster
type AWSCredentials struct {
	// The SecretKeyId for API Access
	SecretKeyId string `protobuf:"bytes,1,opt,name=secret_key_id,json=secretKeyId,proto3" json:"secret_key_id,omitempty"`
	// The SecretAccessKey for API access
	SecretAccessKey string `protobuf:"bytes,2,opt,name=secret_access_key,json=secretAccessKey,proto3" json:"secret_access_key,omitempty"`
	// The Region for API access
	Region               string   `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AWSCredentials) Reset()         { *m = AWSCredentials{} }
func (m *AWSCredentials) String() string { return proto.CompactTextString(m) }
func (*AWSCredentials) ProtoMessage()    {}
func (*AWSCredentials) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{15}
}
func (m *AWSCredentials) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AWSCredentials.Unmarshal(m, b)
}
func (m *AWSCredentials) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AWSCredentials.Marshal(b, m, deterministic)
}
func (dst *AWSCredentials) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AWSCredentials.Merge(dst, src)
}
func (m *AWSCredentials) XXX_Size() int {
	return xxx_messageInfo_AWSCredentials.Size(m)
}
func (m *AWSCredentials) XXX_DiscardUnknown() {
	xxx_messageInfo_AWSCredentials.DiscardUnknown(m)
}

var xxx_messageInfo_AWSCredentials proto.InternalMessageInfo

func (m *AWSCredentials) GetSecretKeyId() string {
	if m != nil {
		return m.SecretKeyId
	}
	return ""
}

func (m *AWSCredentials) GetSecretAccessKey() string {
	if m != nil {
		return m.SecretAccessKey
	}
	return ""
}

func (m *AWSCredentials) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

// The credentials to use for creating the cluster
type AzureCredentials struct {
	// The AppId for API Access
	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// The Tenant for API access
	Tenant string `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	// The Password for API access
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	// The Subscription for API access
	SubscriptionId       string   `protobuf:"bytes,4,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AzureCredentials) Reset()         { *m = AzureCredentials{} }
func (m *AzureCredentials) String() string { return proto.CompactTextString(m) }
func (*AzureCredentials) ProtoMessage()    {}
func (*AzureCredentials) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{16}
}
func (m *AzureCredentials) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AzureCredentials.Unmarshal(m, b)
}
func (m *AzureCredentials) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AzureCredentials.Marshal(b, m, deterministic)
}
func (dst *AzureCredentials) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AzureCredentials.Merge(dst, src)
}
func (m *AzureCredentials) XXX_Size() int {
	return xxx_messageInfo_AzureCredentials.Size(m)
}
func (m *AzureCredentials) XXX_DiscardUnknown() {
	xxx_messageInfo_AzureCredentials.DiscardUnknown(m)
}

var xxx_messageInfo_AzureCredentials proto.InternalMessageInfo

func (m *AzureCredentials) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *AzureCredentials) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *AzureCredentials) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *AzureCredentials) GetSubscriptionId() string {
	if m != nil {
		return m.SubscriptionId
	}
	return ""
}

// the account used by the cluster to create azure resources (ex: load balancer)
type AzureClusterServiceAccount struct {
	// The ClientId (aka: AppID)
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// The ClientSecret (aka: password)
	ClientSecret         string   `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AzureClusterServiceAccount) Reset()         { *m = AzureClusterServiceAccount{} }
func (m *AzureClusterServiceAccount) String() string { return proto.CompactTextString(m) }
func (*AzureClusterServiceAccount) ProtoMessage()    {}
func (*AzureClusterServiceAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{17}
}
func (m *AzureClusterServiceAccount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AzureClusterServiceAccount.Unmarshal(m, b)
}
func (m *AzureClusterServiceAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AzureClusterServiceAccount.Marshal(b, m, deterministic)
}
func (dst *AzureClusterServiceAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AzureClusterServiceAccount.Merge(dst, src)
}
func (m *AzureClusterServiceAccount) XXX_Size() int {
	return xxx_messageInfo_AzureClusterServiceAccount.Size(m)
}
func (m *AzureClusterServiceAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_AzureClusterServiceAccount.DiscardUnknown(m)
}

var xxx_messageInfo_AzureClusterServiceAccount proto.InternalMessageInfo

func (m *AzureClusterServiceAccount) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *AzureClusterServiceAccount) GetClientSecret() string {
	if m != nil {
		return m.ClientSecret
	}
	return ""
}

type CreateClusterAKSSpec struct {
	// The Azure Data Center
	Location string `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	// Credentials to build the cluster
	Credentials *AzureCredentials `protobuf:"bytes,2,opt,name=credentials,proto3" json:"credentials,omitempty"`
	// Instance groups
	InstanceGroups       []*CreateClusterAKSSpec_AKSInstanceGroup `protobuf:"bytes,4,rep,name=instance_groups,json=instanceGroups,proto3" json:"instance_groups,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                 `json:"-"`
	XXX_unrecognized     []byte                                   `json:"-"`
	XXX_sizecache        int32                                    `json:"-"`
}

func (m *CreateClusterAKSSpec) Reset()         { *m = CreateClusterAKSSpec{} }
func (m *CreateClusterAKSSpec) String() string { return proto.CompactTextString(m) }
func (*CreateClusterAKSSpec) ProtoMessage()    {}
func (*CreateClusterAKSSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{18}
}
func (m *CreateClusterAKSSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateClusterAKSSpec.Unmarshal(m, b)
}
func (m *CreateClusterAKSSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateClusterAKSSpec.Marshal(b, m, deterministic)
}
func (dst *CreateClusterAKSSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateClusterAKSSpec.Merge(dst, src)
}
func (m *CreateClusterAKSSpec) XXX_Size() int {
	return xxx_messageInfo_CreateClusterAKSSpec.Size(m)
}
func (m *CreateClusterAKSSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateClusterAKSSpec.DiscardUnknown(m)
}

var xxx_messageInfo_CreateClusterAKSSpec proto.InternalMessageInfo

func (m *CreateClusterAKSSpec) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *CreateClusterAKSSpec) GetCredentials() *AzureCredentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

func (m *CreateClusterAKSSpec) GetInstanceGroups() []*CreateClusterAKSSpec_AKSInstanceGroup {
	if m != nil {
		return m.InstanceGroups
	}
	return nil
}

// Instance groups define a type and number of instances
type CreateClusterAKSSpec_AKSInstanceGroup struct {
	// The name of the group
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Instance type (Standard_D2_v2, etc.)
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Minimum number of instances (defaults to zero)
	MinQuantity int32 `protobuf:"varint,3,opt,name=min_quantity,json=minQuantity,proto3" json:"min_quantity,omitempty"`
	// Maximum number of instances (defaults to zero)
	MaxQuantity          int32    `protobuf:"varint,4,opt,name=max_quantity,json=maxQuantity,proto3" json:"max_quantity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateClusterAKSSpec_AKSInstanceGroup) Reset()         { *m = CreateClusterAKSSpec_AKSInstanceGroup{} }
func (m *CreateClusterAKSSpec_AKSInstanceGroup) String() string { return proto.CompactTextString(m) }
func (*CreateClusterAKSSpec_AKSInstanceGroup) ProtoMessage()    {}
func (*CreateClusterAKSSpec_AKSInstanceGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{18, 0}
}
func (m *CreateClusterAKSSpec_AKSInstanceGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateClusterAKSSpec_AKSInstanceGroup.Unmarshal(m, b)
}
func (m *CreateClusterAKSSpec_AKSInstanceGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateClusterAKSSpec_AKSInstanceGroup.Marshal(b, m, deterministic)
}
func (dst *CreateClusterAKSSpec_AKSInstanceGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateClusterAKSSpec_AKSInstanceGroup.Merge(dst, src)
}
func (m *CreateClusterAKSSpec_AKSInstanceGroup) XXX_Size() int {
	return xxx_messageInfo_CreateClusterAKSSpec_AKSInstanceGroup.Size(m)
}
func (m *CreateClusterAKSSpec_AKSInstanceGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateClusterAKSSpec_AKSInstanceGroup.DiscardUnknown(m)
}

var xxx_messageInfo_CreateClusterAKSSpec_AKSInstanceGroup proto.InternalMessageInfo

func (m *CreateClusterAKSSpec_AKSInstanceGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateClusterAKSSpec_AKSInstanceGroup) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *CreateClusterAKSSpec_AKSInstanceGroup) GetMinQuantity() int32 {
	if m != nil {
		return m.MinQuantity
	}
	return 0
}

func (m *CreateClusterAKSSpec_AKSInstanceGroup) GetMaxQuantity() int32 {
	if m != nil {
		return m.MaxQuantity
	}
	return 0
}

type CreateClusterVMWareSpec struct {
	// Machines which comprise the cluster
	ControlPlaneNodes []*VMWareMachineSpec `protobuf:"bytes,3,rep,name=control_plane_nodes,json=controlPlaneNodes,proto3" json:"control_plane_nodes,omitempty"`
	// Machines which comprise the cluster
	WorkerNodes []*VMWareMachineSpec `protobuf:"bytes,4,rep,name=worker_nodes,json=workerNodes,proto3" json:"worker_nodes,omitempty"`
	// This should be a value like ip:port that will be a virtual IP/port
	// Passed back to external customers to be able to communicate to the cluster
	ApiEndpoint          string   `protobuf:"bytes,5,opt,name=api_endpoint,json=apiEndpoint,proto3" json:"api_endpoint,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateClusterVMWareSpec) Reset()         { *m = CreateClusterVMWareSpec{} }
func (m *CreateClusterVMWareSpec) String() string { return proto.CompactTextString(m) }
func (*CreateClusterVMWareSpec) ProtoMessage()    {}
func (*CreateClusterVMWareSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{19}
}
func (m *CreateClusterVMWareSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateClusterVMWareSpec.Unmarshal(m, b)
}
func (m *CreateClusterVMWareSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateClusterVMWareSpec.Marshal(b, m, deterministic)
}
func (dst *CreateClusterVMWareSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateClusterVMWareSpec.Merge(dst, src)
}
func (m *CreateClusterVMWareSpec) XXX_Size() int {
	return xxx_messageInfo_CreateClusterVMWareSpec.Size(m)
}
func (m *CreateClusterVMWareSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateClusterVMWareSpec.DiscardUnknown(m)
}

var xxx_messageInfo_CreateClusterVMWareSpec proto.InternalMessageInfo

func (m *CreateClusterVMWareSpec) GetControlPlaneNodes() []*VMWareMachineSpec {
	if m != nil {
		return m.ControlPlaneNodes
	}
	return nil
}

func (m *CreateClusterVMWareSpec) GetWorkerNodes() []*VMWareMachineSpec {
	if m != nil {
		return m.WorkerNodes
	}
	return nil
}

func (m *CreateClusterVMWareSpec) GetApiEndpoint() string {
	if m != nil {
		return m.ApiEndpoint
	}
	return ""
}

type KubernetesLabel struct {
	// The name of a label
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The value of a label
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KubernetesLabel) Reset()         { *m = KubernetesLabel{} }
func (m *KubernetesLabel) String() string { return proto.CompactTextString(m) }
func (*KubernetesLabel) ProtoMessage()    {}
func (*KubernetesLabel) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{20}
}
func (m *KubernetesLabel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KubernetesLabel.Unmarshal(m, b)
}
func (m *KubernetesLabel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KubernetesLabel.Marshal(b, m, deterministic)
}
func (dst *KubernetesLabel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubernetesLabel.Merge(dst, src)
}
func (m *KubernetesLabel) XXX_Size() int {
	return xxx_messageInfo_KubernetesLabel.Size(m)
}
func (m *KubernetesLabel) XXX_DiscardUnknown() {
	xxx_messageInfo_KubernetesLabel.DiscardUnknown(m)
}

var xxx_messageInfo_KubernetesLabel proto.InternalMessageInfo

func (m *KubernetesLabel) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *KubernetesLabel) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// The specification for a specific node
type VMWareMachineSpec struct {
	// The username for SSH access
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// The host for SSH access
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	// The port for SSH access
	Port int32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	// The k8s version for the control plane. This node is only a master if this field is defined.
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	// The labels for the machines
	Labels               []*KubernetesLabel `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *VMWareMachineSpec) Reset()         { *m = VMWareMachineSpec{} }
func (m *VMWareMachineSpec) String() string { return proto.CompactTextString(m) }
func (*VMWareMachineSpec) ProtoMessage()    {}
func (*VMWareMachineSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{21}
}
func (m *VMWareMachineSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VMWareMachineSpec.Unmarshal(m, b)
}
func (m *VMWareMachineSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VMWareMachineSpec.Marshal(b, m, deterministic)
}
func (dst *VMWareMachineSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMWareMachineSpec.Merge(dst, src)
}
func (m *VMWareMachineSpec) XXX_Size() int {
	return xxx_messageInfo_VMWareMachineSpec.Size(m)
}
func (m *VMWareMachineSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_VMWareMachineSpec.DiscardUnknown(m)
}

var xxx_messageInfo_VMWareMachineSpec proto.InternalMessageInfo

func (m *VMWareMachineSpec) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *VMWareMachineSpec) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *VMWareMachineSpec) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *VMWareMachineSpec) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *VMWareMachineSpec) GetLabels() []*KubernetesLabel {
	if m != nil {
		return m.Labels
	}
	return nil
}

type ProvisionTillerMsg struct {
	// Name of the tiller / package manager
	Name string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	// Cluster tiller should be installed on
	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Namespace tiller should be installed in
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// image (if not the default) for tiller (quay.io/someguy/tiller)
	Image string `protobuf:"bytes,11,opt,name=image,proto3" json:"image,omitempty"`
	// Version of tiller/helm to install / upgrade to (v2.11.0, etc)
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// Is the tiller a cluster-wide tiller?
	// Should it have cluster-wide admin privileges?
	ClusterWide bool `protobuf:"varint,4,opt,name=cluster_wide,json=clusterWide,proto3" json:"cluster_wide,omitempty"`
	// Namespaces that it should be able to admin on
	AdminNamespaces []string `protobuf:"bytes,5,rep,name=admin_namespaces,json=adminNamespaces,proto3" json:"admin_namespaces,omitempty"`
	// AWS Credentials
	Aws *AWSCredentials `protobuf:"bytes,6,opt,name=aws,proto3" json:"aws,omitempty"`
	// Azure Credentials
	Azure *AzureCredentials `protobuf:"bytes,7,opt,name=azure,proto3" json:"azure,omitempty"`
	// Name of the providers (aws/azure/vmware/etc)
	Provider Provider `protobuf:"varint,8,opt,name=provider,proto3,enum=cluster_manager_api.Provider" json:"provider,omitempty"`
	// Callback information
	Callback             *Callback `protobuf:"bytes,9,opt,name=callback,proto3" json:"callback,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ProvisionTillerMsg) Reset()         { *m = ProvisionTillerMsg{} }
func (m *ProvisionTillerMsg) String() string { return proto.CompactTextString(m) }
func (*ProvisionTillerMsg) ProtoMessage()    {}
func (*ProvisionTillerMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{22}
}
func (m *ProvisionTillerMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProvisionTillerMsg.Unmarshal(m, b)
}
func (m *ProvisionTillerMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProvisionTillerMsg.Marshal(b, m, deterministic)
}
func (dst *ProvisionTillerMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProvisionTillerMsg.Merge(dst, src)
}
func (m *ProvisionTillerMsg) XXX_Size() int {
	return xxx_messageInfo_ProvisionTillerMsg.Size(m)
}
func (m *ProvisionTillerMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ProvisionTillerMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ProvisionTillerMsg proto.InternalMessageInfo

func (m *ProvisionTillerMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProvisionTillerMsg) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *ProvisionTillerMsg) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ProvisionTillerMsg) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *ProvisionTillerMsg) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ProvisionTillerMsg) GetClusterWide() bool {
	if m != nil {
		return m.ClusterWide
	}
	return false
}

func (m *ProvisionTillerMsg) GetAdminNamespaces() []string {
	if m != nil {
		return m.AdminNamespaces
	}
	return nil
}

func (m *ProvisionTillerMsg) GetAws() *AWSCredentials {
	if m != nil {
		return m.Aws
	}
	return nil
}

func (m *ProvisionTillerMsg) GetAzure() *AzureCredentials {
	if m != nil {
		return m.Azure
	}
	return nil
}

func (m *ProvisionTillerMsg) GetProvider() Provider {
	if m != nil {
		return m.Provider
	}
	return Provider_undefined
}

func (m *ProvisionTillerMsg) GetCallback() *Callback {
	if m != nil {
		return m.Callback
	}
	return nil
}

type ProvisionTillerReply struct {
	// Was the operation successful
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	// What messages were given
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProvisionTillerReply) Reset()         { *m = ProvisionTillerReply{} }
func (m *ProvisionTillerReply) String() string { return proto.CompactTextString(m) }
func (*ProvisionTillerReply) ProtoMessage()    {}
func (*ProvisionTillerReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{23}
}
func (m *ProvisionTillerReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProvisionTillerReply.Unmarshal(m, b)
}
func (m *ProvisionTillerReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProvisionTillerReply.Marshal(b, m, deterministic)
}
func (dst *ProvisionTillerReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProvisionTillerReply.Merge(dst, src)
}
func (m *ProvisionTillerReply) XXX_Size() int {
	return xxx_messageInfo_ProvisionTillerReply.Size(m)
}
func (m *ProvisionTillerReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ProvisionTillerReply.DiscardUnknown(m)
}

var xxx_messageInfo_ProvisionTillerReply proto.InternalMessageInfo

func (m *ProvisionTillerReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *ProvisionTillerReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type InstallHelmChartMsg struct {
	// Cluster tiller should be installed on
	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// What tiller should be used
	PackageManger string `protobuf:"bytes,2,opt,name=package_manger,json=packageManger,proto3" json:"package_manger,omitempty"`
	// Chart Settings
	Chart *GenericHelmChart `protobuf:"bytes,3,opt,name=chart,proto3" json:"chart,omitempty"`
	// AWS Credentials
	Aws *AWSCredentials `protobuf:"bytes,4,opt,name=aws,proto3" json:"aws,omitempty"`
	// Azure Credentials
	Azure *AzureCredentials `protobuf:"bytes,5,opt,name=azure,proto3" json:"azure,omitempty"`
	// Name of the providers (aws/azure/vmware/etc)
	Provider Provider `protobuf:"varint,6,opt,name=provider,proto3,enum=cluster_manager_api.Provider" json:"provider,omitempty"`
	// Callback information
	Callback             *Callback `protobuf:"bytes,7,opt,name=callback,proto3" json:"callback,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *InstallHelmChartMsg) Reset()         { *m = InstallHelmChartMsg{} }
func (m *InstallHelmChartMsg) String() string { return proto.CompactTextString(m) }
func (*InstallHelmChartMsg) ProtoMessage()    {}
func (*InstallHelmChartMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{24}
}
func (m *InstallHelmChartMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstallHelmChartMsg.Unmarshal(m, b)
}
func (m *InstallHelmChartMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstallHelmChartMsg.Marshal(b, m, deterministic)
}
func (dst *InstallHelmChartMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallHelmChartMsg.Merge(dst, src)
}
func (m *InstallHelmChartMsg) XXX_Size() int {
	return xxx_messageInfo_InstallHelmChartMsg.Size(m)
}
func (m *InstallHelmChartMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallHelmChartMsg.DiscardUnknown(m)
}

var xxx_messageInfo_InstallHelmChartMsg proto.InternalMessageInfo

func (m *InstallHelmChartMsg) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *InstallHelmChartMsg) GetPackageManger() string {
	if m != nil {
		return m.PackageManger
	}
	return ""
}

func (m *InstallHelmChartMsg) GetChart() *GenericHelmChart {
	if m != nil {
		return m.Chart
	}
	return nil
}

func (m *InstallHelmChartMsg) GetAws() *AWSCredentials {
	if m != nil {
		return m.Aws
	}
	return nil
}

func (m *InstallHelmChartMsg) GetAzure() *AzureCredentials {
	if m != nil {
		return m.Azure
	}
	return nil
}

func (m *InstallHelmChartMsg) GetProvider() Provider {
	if m != nil {
		return m.Provider
	}
	return Provider_undefined
}

func (m *InstallHelmChartMsg) GetCallback() *Callback {
	if m != nil {
		return m.Callback
	}
	return nil
}

type InstallHelmChartReply struct {
	// Was the operation successful
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	// What messages were given
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstallHelmChartReply) Reset()         { *m = InstallHelmChartReply{} }
func (m *InstallHelmChartReply) String() string { return proto.CompactTextString(m) }
func (*InstallHelmChartReply) ProtoMessage()    {}
func (*InstallHelmChartReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{25}
}
func (m *InstallHelmChartReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstallHelmChartReply.Unmarshal(m, b)
}
func (m *InstallHelmChartReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstallHelmChartReply.Marshal(b, m, deterministic)
}
func (dst *InstallHelmChartReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallHelmChartReply.Merge(dst, src)
}
func (m *InstallHelmChartReply) XXX_Size() int {
	return xxx_messageInfo_InstallHelmChartReply.Size(m)
}
func (m *InstallHelmChartReply) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallHelmChartReply.DiscardUnknown(m)
}

var xxx_messageInfo_InstallHelmChartReply proto.InternalMessageInfo

func (m *InstallHelmChartReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *InstallHelmChartReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DeleteHelmChartMsg struct {
	// Cluster tiller should be installed on
	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// What tiller should be used
	PackageManager string `protobuf:"bytes,2,opt,name=package_manager,json=packageManager,proto3" json:"package_manager,omitempty"`
	// Chart Name
	Chart string `protobuf:"bytes,3,opt,name=chart,proto3" json:"chart,omitempty"`
	// AWS Credentials
	Aws *AWSCredentials `protobuf:"bytes,4,opt,name=aws,proto3" json:"aws,omitempty"`
	// Azure Credentials
	Azure *AzureCredentials `protobuf:"bytes,5,opt,name=azure,proto3" json:"azure,omitempty"`
	// Name of the providers (aws/azure/vmware/etc)
	Provider Provider `protobuf:"varint,6,opt,name=provider,proto3,enum=cluster_manager_api.Provider" json:"provider,omitempty"`
	// A unique id to indicate this request
	RequestId string `protobuf:"bytes,7,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Callback information
	Callback             *Callback `protobuf:"bytes,8,opt,name=callback,proto3" json:"callback,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *DeleteHelmChartMsg) Reset()         { *m = DeleteHelmChartMsg{} }
func (m *DeleteHelmChartMsg) String() string { return proto.CompactTextString(m) }
func (*DeleteHelmChartMsg) ProtoMessage()    {}
func (*DeleteHelmChartMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{26}
}
func (m *DeleteHelmChartMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteHelmChartMsg.Unmarshal(m, b)
}
func (m *DeleteHelmChartMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteHelmChartMsg.Marshal(b, m, deterministic)
}
func (dst *DeleteHelmChartMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteHelmChartMsg.Merge(dst, src)
}
func (m *DeleteHelmChartMsg) XXX_Size() int {
	return xxx_messageInfo_DeleteHelmChartMsg.Size(m)
}
func (m *DeleteHelmChartMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteHelmChartMsg.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteHelmChartMsg proto.InternalMessageInfo

func (m *DeleteHelmChartMsg) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *DeleteHelmChartMsg) GetPackageManager() string {
	if m != nil {
		return m.PackageManager
	}
	return ""
}

func (m *DeleteHelmChartMsg) GetChart() string {
	if m != nil {
		return m.Chart
	}
	return ""
}

func (m *DeleteHelmChartMsg) GetAws() *AWSCredentials {
	if m != nil {
		return m.Aws
	}
	return nil
}

func (m *DeleteHelmChartMsg) GetAzure() *AzureCredentials {
	if m != nil {
		return m.Azure
	}
	return nil
}

func (m *DeleteHelmChartMsg) GetProvider() Provider {
	if m != nil {
		return m.Provider
	}
	return Provider_undefined
}

func (m *DeleteHelmChartMsg) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *DeleteHelmChartMsg) GetCallback() *Callback {
	if m != nil {
		return m.Callback
	}
	return nil
}

type DeleteHelmChartReply struct {
	// Was the operation successful
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	// What messages were given
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteHelmChartReply) Reset()         { *m = DeleteHelmChartReply{} }
func (m *DeleteHelmChartReply) String() string { return proto.CompactTextString(m) }
func (*DeleteHelmChartReply) ProtoMessage()    {}
func (*DeleteHelmChartReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{27}
}
func (m *DeleteHelmChartReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteHelmChartReply.Unmarshal(m, b)
}
func (m *DeleteHelmChartReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteHelmChartReply.Marshal(b, m, deterministic)
}
func (dst *DeleteHelmChartReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteHelmChartReply.Merge(dst, src)
}
func (m *DeleteHelmChartReply) XXX_Size() int {
	return xxx_messageInfo_DeleteHelmChartReply.Size(m)
}
func (m *DeleteHelmChartReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteHelmChartReply.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteHelmChartReply proto.InternalMessageInfo

func (m *DeleteHelmChartReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *DeleteHelmChartReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GenericHelmChart struct {
	// What is the name of the deployment
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// What is the namespace to deploy the application to
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// What is the chart repository
	Repo *GenericHelmChart_ChartRepository `protobuf:"bytes,3,opt,name=repo,proto3" json:"repo,omitempty"`
	// What is the chart name
	Chart string `protobuf:"bytes,4,opt,name=chart,proto3" json:"chart,omitempty"`
	// What is the chart version
	Version string `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	// What are the options (nested yaml - the Values.yaml contents)
	Values string `protobuf:"bytes,6,opt,name=values,proto3" json:"values,omitempty"`
	// The payload of a chart (for airgapped solutions, etc)
	ChartPayload         []byte   `protobuf:"bytes,7,opt,name=chart_payload,json=chartPayload,proto3" json:"chart_payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenericHelmChart) Reset()         { *m = GenericHelmChart{} }
func (m *GenericHelmChart) String() string { return proto.CompactTextString(m) }
func (*GenericHelmChart) ProtoMessage()    {}
func (*GenericHelmChart) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{28}
}
func (m *GenericHelmChart) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenericHelmChart.Unmarshal(m, b)
}
func (m *GenericHelmChart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenericHelmChart.Marshal(b, m, deterministic)
}
func (dst *GenericHelmChart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenericHelmChart.Merge(dst, src)
}
func (m *GenericHelmChart) XXX_Size() int {
	return xxx_messageInfo_GenericHelmChart.Size(m)
}
func (m *GenericHelmChart) XXX_DiscardUnknown() {
	xxx_messageInfo_GenericHelmChart.DiscardUnknown(m)
}

var xxx_messageInfo_GenericHelmChart proto.InternalMessageInfo

func (m *GenericHelmChart) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GenericHelmChart) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GenericHelmChart) GetRepo() *GenericHelmChart_ChartRepository {
	if m != nil {
		return m.Repo
	}
	return nil
}

func (m *GenericHelmChart) GetChart() string {
	if m != nil {
		return m.Chart
	}
	return ""
}

func (m *GenericHelmChart) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *GenericHelmChart) GetValues() string {
	if m != nil {
		return m.Values
	}
	return ""
}

func (m *GenericHelmChart) GetChartPayload() []byte {
	if m != nil {
		return m.ChartPayload
	}
	return nil
}

type GenericHelmChart_ChartRepository struct {
	// What is the URL for the chart repo
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// What is the repo name
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenericHelmChart_ChartRepository) Reset()         { *m = GenericHelmChart_ChartRepository{} }
func (m *GenericHelmChart_ChartRepository) String() string { return proto.CompactTextString(m) }
func (*GenericHelmChart_ChartRepository) ProtoMessage()    {}
func (*GenericHelmChart_ChartRepository) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{28, 0}
}
func (m *GenericHelmChart_ChartRepository) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenericHelmChart_ChartRepository.Unmarshal(m, b)
}
func (m *GenericHelmChart_ChartRepository) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenericHelmChart_ChartRepository.Marshal(b, m, deterministic)
}
func (dst *GenericHelmChart_ChartRepository) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenericHelmChart_ChartRepository.Merge(dst, src)
}
func (m *GenericHelmChart_ChartRepository) XXX_Size() int {
	return xxx_messageInfo_GenericHelmChart_ChartRepository.Size(m)
}
func (m *GenericHelmChart_ChartRepository) XXX_DiscardUnknown() {
	xxx_messageInfo_GenericHelmChart_ChartRepository.DiscardUnknown(m)
}

var xxx_messageInfo_GenericHelmChart_ChartRepository proto.InternalMessageInfo

func (m *GenericHelmChart_ChartRepository) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *GenericHelmChart_ChartRepository) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetUpgradeClusterInformationMsg struct {
	// Name of the providers (aws/azure/vmware/etc)
	Provider Provider `protobuf:"varint,1,opt,name=provider,proto3,enum=cluster_manager_api.Provider" json:"provider,omitempty"`
	// AWS Credentials
	Aws *AWSCredentials `protobuf:"bytes,2,opt,name=aws,proto3" json:"aws,omitempty"`
	// Azure Credentials
	Azure *AzureCredentials `protobuf:"bytes,3,opt,name=azure,proto3" json:"azure,omitempty"`
	// What is the cluster that we are considering for upgrade
	Name                 string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUpgradeClusterInformationMsg) Reset()         { *m = GetUpgradeClusterInformationMsg{} }
func (m *GetUpgradeClusterInformationMsg) String() string { return proto.CompactTextString(m) }
func (*GetUpgradeClusterInformationMsg) ProtoMessage()    {}
func (*GetUpgradeClusterInformationMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{29}
}
func (m *GetUpgradeClusterInformationMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUpgradeClusterInformationMsg.Unmarshal(m, b)
}
func (m *GetUpgradeClusterInformationMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUpgradeClusterInformationMsg.Marshal(b, m, deterministic)
}
func (dst *GetUpgradeClusterInformationMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUpgradeClusterInformationMsg.Merge(dst, src)
}
func (m *GetUpgradeClusterInformationMsg) XXX_Size() int {
	return xxx_messageInfo_GetUpgradeClusterInformationMsg.Size(m)
}
func (m *GetUpgradeClusterInformationMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUpgradeClusterInformationMsg.DiscardUnknown(m)
}

var xxx_messageInfo_GetUpgradeClusterInformationMsg proto.InternalMessageInfo

func (m *GetUpgradeClusterInformationMsg) GetProvider() Provider {
	if m != nil {
		return m.Provider
	}
	return Provider_undefined
}

func (m *GetUpgradeClusterInformationMsg) GetAws() *AWSCredentials {
	if m != nil {
		return m.Aws
	}
	return nil
}

func (m *GetUpgradeClusterInformationMsg) GetAzure() *AzureCredentials {
	if m != nil {
		return m.Azure
	}
	return nil
}

func (m *GetUpgradeClusterInformationMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetUpgradeClusterInformationReply struct {
	// Can the cluster be upgraded
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	// What versions are possible right now
	Versions             []string `protobuf:"bytes,2,rep,name=versions,proto3" json:"versions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUpgradeClusterInformationReply) Reset()         { *m = GetUpgradeClusterInformationReply{} }
func (m *GetUpgradeClusterInformationReply) String() string { return proto.CompactTextString(m) }
func (*GetUpgradeClusterInformationReply) ProtoMessage()    {}
func (*GetUpgradeClusterInformationReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{30}
}
func (m *GetUpgradeClusterInformationReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUpgradeClusterInformationReply.Unmarshal(m, b)
}
func (m *GetUpgradeClusterInformationReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUpgradeClusterInformationReply.Marshal(b, m, deterministic)
}
func (dst *GetUpgradeClusterInformationReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUpgradeClusterInformationReply.Merge(dst, src)
}
func (m *GetUpgradeClusterInformationReply) XXX_Size() int {
	return xxx_messageInfo_GetUpgradeClusterInformationReply.Size(m)
}
func (m *GetUpgradeClusterInformationReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUpgradeClusterInformationReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetUpgradeClusterInformationReply proto.InternalMessageInfo

func (m *GetUpgradeClusterInformationReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *GetUpgradeClusterInformationReply) GetVersions() []string {
	if m != nil {
		return m.Versions
	}
	return nil
}

type UpgradeClusterMsg struct {
	// Name of the providers (aws/azure/vmware/etc)
	Provider Provider `protobuf:"varint,1,opt,name=provider,proto3,enum=cluster_manager_api.Provider" json:"provider,omitempty"`
	// AWS Credentials
	Aws *AWSCredentials `protobuf:"bytes,2,opt,name=aws,proto3" json:"aws,omitempty"`
	// Azure Credentials
	Azure *AzureCredentials `protobuf:"bytes,3,opt,name=azure,proto3" json:"azure,omitempty"`
	// What is the cluster that we are considering for upgrade
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// What version are we upgrading to?
	Version string `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	// Callback information
	Callback             *Callback `protobuf:"bytes,6,opt,name=callback,proto3" json:"callback,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *UpgradeClusterMsg) Reset()         { *m = UpgradeClusterMsg{} }
func (m *UpgradeClusterMsg) String() string { return proto.CompactTextString(m) }
func (*UpgradeClusterMsg) ProtoMessage()    {}
func (*UpgradeClusterMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{31}
}
func (m *UpgradeClusterMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpgradeClusterMsg.Unmarshal(m, b)
}
func (m *UpgradeClusterMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpgradeClusterMsg.Marshal(b, m, deterministic)
}
func (dst *UpgradeClusterMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpgradeClusterMsg.Merge(dst, src)
}
func (m *UpgradeClusterMsg) XXX_Size() int {
	return xxx_messageInfo_UpgradeClusterMsg.Size(m)
}
func (m *UpgradeClusterMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_UpgradeClusterMsg.DiscardUnknown(m)
}

var xxx_messageInfo_UpgradeClusterMsg proto.InternalMessageInfo

func (m *UpgradeClusterMsg) GetProvider() Provider {
	if m != nil {
		return m.Provider
	}
	return Provider_undefined
}

func (m *UpgradeClusterMsg) GetAws() *AWSCredentials {
	if m != nil {
		return m.Aws
	}
	return nil
}

func (m *UpgradeClusterMsg) GetAzure() *AzureCredentials {
	if m != nil {
		return m.Azure
	}
	return nil
}

func (m *UpgradeClusterMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpgradeClusterMsg) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *UpgradeClusterMsg) GetCallback() *Callback {
	if m != nil {
		return m.Callback
	}
	return nil
}

type UpgradeClusterReply struct {
	// Was this a successful request
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpgradeClusterReply) Reset()         { *m = UpgradeClusterReply{} }
func (m *UpgradeClusterReply) String() string { return proto.CompactTextString(m) }
func (*UpgradeClusterReply) ProtoMessage()    {}
func (*UpgradeClusterReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{32}
}
func (m *UpgradeClusterReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpgradeClusterReply.Unmarshal(m, b)
}
func (m *UpgradeClusterReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpgradeClusterReply.Marshal(b, m, deterministic)
}
func (dst *UpgradeClusterReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpgradeClusterReply.Merge(dst, src)
}
func (m *UpgradeClusterReply) XXX_Size() int {
	return xxx_messageInfo_UpgradeClusterReply.Size(m)
}
func (m *UpgradeClusterReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UpgradeClusterReply.DiscardUnknown(m)
}

var xxx_messageInfo_UpgradeClusterReply proto.InternalMessageInfo

func (m *UpgradeClusterReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type AdjustClusterMsg struct {
	// What is the cluster that we are considering for upgrade
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Name of the providers (aws/azure/vmware/etc)
	Provider Provider `protobuf:"varint,2,opt,name=provider,proto3,enum=cluster_manager_api.Provider" json:"provider,omitempty"`
	// AWS Credentials
	Aws *AWSCredentials `protobuf:"bytes,3,opt,name=aws,proto3" json:"aws,omitempty"`
	// Provider changes
	//
	// Types that are valid to be assigned to ProviderChanges:
	//	*AdjustClusterMsg_Azure
	//	*AdjustClusterMsg_Vmware
	ProviderChanges isAdjustClusterMsg_ProviderChanges `protobuf_oneof:"provider_changes"`
	// Callback information
	Callback             *Callback `protobuf:"bytes,8,opt,name=callback,proto3" json:"callback,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *AdjustClusterMsg) Reset()         { *m = AdjustClusterMsg{} }
func (m *AdjustClusterMsg) String() string { return proto.CompactTextString(m) }
func (*AdjustClusterMsg) ProtoMessage()    {}
func (*AdjustClusterMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{33}
}
func (m *AdjustClusterMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AdjustClusterMsg.Unmarshal(m, b)
}
func (m *AdjustClusterMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AdjustClusterMsg.Marshal(b, m, deterministic)
}
func (dst *AdjustClusterMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdjustClusterMsg.Merge(dst, src)
}
func (m *AdjustClusterMsg) XXX_Size() int {
	return xxx_messageInfo_AdjustClusterMsg.Size(m)
}
func (m *AdjustClusterMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_AdjustClusterMsg.DiscardUnknown(m)
}

var xxx_messageInfo_AdjustClusterMsg proto.InternalMessageInfo

func (m *AdjustClusterMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AdjustClusterMsg) GetProvider() Provider {
	if m != nil {
		return m.Provider
	}
	return Provider_undefined
}

func (m *AdjustClusterMsg) GetAws() *AWSCredentials {
	if m != nil {
		return m.Aws
	}
	return nil
}

type isAdjustClusterMsg_ProviderChanges interface {
	isAdjustClusterMsg_ProviderChanges()
}

type AdjustClusterMsg_Azure struct {
	Azure *AdjustClusterMsg_AdjustClusterAKSSpec `protobuf:"bytes,6,opt,name=azure,proto3,oneof"`
}

type AdjustClusterMsg_Vmware struct {
	Vmware *AdjustClusterMsg_AdjustClusterVMWareSpec `protobuf:"bytes,7,opt,name=vmware,proto3,oneof"`
}

func (*AdjustClusterMsg_Azure) isAdjustClusterMsg_ProviderChanges() {}

func (*AdjustClusterMsg_Vmware) isAdjustClusterMsg_ProviderChanges() {}

func (m *AdjustClusterMsg) GetProviderChanges() isAdjustClusterMsg_ProviderChanges {
	if m != nil {
		return m.ProviderChanges
	}
	return nil
}

func (m *AdjustClusterMsg) GetAzure() *AdjustClusterMsg_AdjustClusterAKSSpec {
	if x, ok := m.GetProviderChanges().(*AdjustClusterMsg_Azure); ok {
		return x.Azure
	}
	return nil
}

func (m *AdjustClusterMsg) GetVmware() *AdjustClusterMsg_AdjustClusterVMWareSpec {
	if x, ok := m.GetProviderChanges().(*AdjustClusterMsg_Vmware); ok {
		return x.Vmware
	}
	return nil
}

func (m *AdjustClusterMsg) GetCallback() *Callback {
	if m != nil {
		return m.Callback
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AdjustClusterMsg) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AdjustClusterMsg_OneofMarshaler, _AdjustClusterMsg_OneofUnmarshaler, _AdjustClusterMsg_OneofSizer, []interface{}{
		(*AdjustClusterMsg_Azure)(nil),
		(*AdjustClusterMsg_Vmware)(nil),
	}
}

func _AdjustClusterMsg_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AdjustClusterMsg)
	// provider_changes
	switch x := m.ProviderChanges.(type) {
	case *AdjustClusterMsg_Azure:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Azure); err != nil {
			return err
		}
	case *AdjustClusterMsg_Vmware:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Vmware); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AdjustClusterMsg.ProviderChanges has unexpected type %T", x)
	}
	return nil
}

func _AdjustClusterMsg_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AdjustClusterMsg)
	switch tag {
	case 6: // provider_changes.azure
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AdjustClusterMsg_AdjustClusterAKSSpec)
		err := b.DecodeMessage(msg)
		m.ProviderChanges = &AdjustClusterMsg_Azure{msg}
		return true, err
	case 7: // provider_changes.vmware
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AdjustClusterMsg_AdjustClusterVMWareSpec)
		err := b.DecodeMessage(msg)
		m.ProviderChanges = &AdjustClusterMsg_Vmware{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AdjustClusterMsg_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AdjustClusterMsg)
	// provider_changes
	switch x := m.ProviderChanges.(type) {
	case *AdjustClusterMsg_Azure:
		s := proto.Size(x.Azure)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AdjustClusterMsg_Vmware:
		s := proto.Size(x.Vmware)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type AdjustClusterMsg_AdjustClusterVMWareSpec struct {
	// Machines which we want to add to the cluster
	AddNodes []*VMWareMachineSpec `protobuf:"bytes,1,rep,name=add_nodes,json=addNodes,proto3" json:"add_nodes,omitempty"`
	// Machines which we want to remove from the cluster
	RemoveNodes          []*AdjustClusterMsg_VMWareRemoveMachineSpec `protobuf:"bytes,2,rep,name=remove_nodes,json=removeNodes,proto3" json:"remove_nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                    `json:"-"`
	XXX_unrecognized     []byte                                      `json:"-"`
	XXX_sizecache        int32                                       `json:"-"`
}

func (m *AdjustClusterMsg_AdjustClusterVMWareSpec) Reset() {
	*m = AdjustClusterMsg_AdjustClusterVMWareSpec{}
}
func (m *AdjustClusterMsg_AdjustClusterVMWareSpec) String() string { return proto.CompactTextString(m) }
func (*AdjustClusterMsg_AdjustClusterVMWareSpec) ProtoMessage()    {}
func (*AdjustClusterMsg_AdjustClusterVMWareSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{33, 0}
}
func (m *AdjustClusterMsg_AdjustClusterVMWareSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AdjustClusterMsg_AdjustClusterVMWareSpec.Unmarshal(m, b)
}
func (m *AdjustClusterMsg_AdjustClusterVMWareSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AdjustClusterMsg_AdjustClusterVMWareSpec.Marshal(b, m, deterministic)
}
func (dst *AdjustClusterMsg_AdjustClusterVMWareSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdjustClusterMsg_AdjustClusterVMWareSpec.Merge(dst, src)
}
func (m *AdjustClusterMsg_AdjustClusterVMWareSpec) XXX_Size() int {
	return xxx_messageInfo_AdjustClusterMsg_AdjustClusterVMWareSpec.Size(m)
}
func (m *AdjustClusterMsg_AdjustClusterVMWareSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_AdjustClusterMsg_AdjustClusterVMWareSpec.DiscardUnknown(m)
}

var xxx_messageInfo_AdjustClusterMsg_AdjustClusterVMWareSpec proto.InternalMessageInfo

func (m *AdjustClusterMsg_AdjustClusterVMWareSpec) GetAddNodes() []*VMWareMachineSpec {
	if m != nil {
		return m.AddNodes
	}
	return nil
}

func (m *AdjustClusterMsg_AdjustClusterVMWareSpec) GetRemoveNodes() []*AdjustClusterMsg_VMWareRemoveMachineSpec {
	if m != nil {
		return m.RemoveNodes
	}
	return nil
}

type AdjustClusterMsg_VMWareRemoveMachineSpec struct {
	// The host for SSH access
	Host                 string   `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AdjustClusterMsg_VMWareRemoveMachineSpec) Reset() {
	*m = AdjustClusterMsg_VMWareRemoveMachineSpec{}
}
func (m *AdjustClusterMsg_VMWareRemoveMachineSpec) String() string { return proto.CompactTextString(m) }
func (*AdjustClusterMsg_VMWareRemoveMachineSpec) ProtoMessage()    {}
func (*AdjustClusterMsg_VMWareRemoveMachineSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{33, 1}
}
func (m *AdjustClusterMsg_VMWareRemoveMachineSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AdjustClusterMsg_VMWareRemoveMachineSpec.Unmarshal(m, b)
}
func (m *AdjustClusterMsg_VMWareRemoveMachineSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AdjustClusterMsg_VMWareRemoveMachineSpec.Marshal(b, m, deterministic)
}
func (dst *AdjustClusterMsg_VMWareRemoveMachineSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdjustClusterMsg_VMWareRemoveMachineSpec.Merge(dst, src)
}
func (m *AdjustClusterMsg_VMWareRemoveMachineSpec) XXX_Size() int {
	return xxx_messageInfo_AdjustClusterMsg_VMWareRemoveMachineSpec.Size(m)
}
func (m *AdjustClusterMsg_VMWareRemoveMachineSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_AdjustClusterMsg_VMWareRemoveMachineSpec.DiscardUnknown(m)
}

var xxx_messageInfo_AdjustClusterMsg_VMWareRemoveMachineSpec proto.InternalMessageInfo

func (m *AdjustClusterMsg_VMWareRemoveMachineSpec) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type AdjustClusterMsg_AdjustClusterAKSSpec struct {
	// Credentials to build the cluster
	Credentials *AzureCredentials `protobuf:"bytes,1,opt,name=credentials,proto3" json:"credentials,omitempty"`
	// Node Pool Name
	NodePool string `protobuf:"bytes,2,opt,name=node_pool,json=nodePool,proto3" json:"node_pool,omitempty"`
	// umber to increase by
	AddCount int32 `protobuf:"varint,3,opt,name=add_count,json=addCount,proto3" json:"add_count,omitempty"`
	// number to decrease by
	RemoveCount          int32    `protobuf:"varint,4,opt,name=remove_count,json=removeCount,proto3" json:"remove_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AdjustClusterMsg_AdjustClusterAKSSpec) Reset()         { *m = AdjustClusterMsg_AdjustClusterAKSSpec{} }
func (m *AdjustClusterMsg_AdjustClusterAKSSpec) String() string { return proto.CompactTextString(m) }
func (*AdjustClusterMsg_AdjustClusterAKSSpec) ProtoMessage()    {}
func (*AdjustClusterMsg_AdjustClusterAKSSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{33, 2}
}
func (m *AdjustClusterMsg_AdjustClusterAKSSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AdjustClusterMsg_AdjustClusterAKSSpec.Unmarshal(m, b)
}
func (m *AdjustClusterMsg_AdjustClusterAKSSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AdjustClusterMsg_AdjustClusterAKSSpec.Marshal(b, m, deterministic)
}
func (dst *AdjustClusterMsg_AdjustClusterAKSSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdjustClusterMsg_AdjustClusterAKSSpec.Merge(dst, src)
}
func (m *AdjustClusterMsg_AdjustClusterAKSSpec) XXX_Size() int {
	return xxx_messageInfo_AdjustClusterMsg_AdjustClusterAKSSpec.Size(m)
}
func (m *AdjustClusterMsg_AdjustClusterAKSSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_AdjustClusterMsg_AdjustClusterAKSSpec.DiscardUnknown(m)
}

var xxx_messageInfo_AdjustClusterMsg_AdjustClusterAKSSpec proto.InternalMessageInfo

func (m *AdjustClusterMsg_AdjustClusterAKSSpec) GetCredentials() *AzureCredentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

func (m *AdjustClusterMsg_AdjustClusterAKSSpec) GetNodePool() string {
	if m != nil {
		return m.NodePool
	}
	return ""
}

func (m *AdjustClusterMsg_AdjustClusterAKSSpec) GetAddCount() int32 {
	if m != nil {
		return m.AddCount
	}
	return 0
}

func (m *AdjustClusterMsg_AdjustClusterAKSSpec) GetRemoveCount() int32 {
	if m != nil {
		return m.RemoveCount
	}
	return 0
}

type AdjustClusterReply struct {
	// Was this a successful request
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AdjustClusterReply) Reset()         { *m = AdjustClusterReply{} }
func (m *AdjustClusterReply) String() string { return proto.CompactTextString(m) }
func (*AdjustClusterReply) ProtoMessage()    {}
func (*AdjustClusterReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{34}
}
func (m *AdjustClusterReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AdjustClusterReply.Unmarshal(m, b)
}
func (m *AdjustClusterReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AdjustClusterReply.Marshal(b, m, deterministic)
}
func (dst *AdjustClusterReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdjustClusterReply.Merge(dst, src)
}
func (m *AdjustClusterReply) XXX_Size() int {
	return xxx_messageInfo_AdjustClusterReply.Size(m)
}
func (m *AdjustClusterReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AdjustClusterReply.DiscardUnknown(m)
}

var xxx_messageInfo_AdjustClusterReply proto.InternalMessageInfo

func (m *AdjustClusterReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type UpdateAWSCredentialsMsg struct {
	// Cluster name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Credentials to build the cluster
	Credentials          *AWSCredentials `protobuf:"bytes,2,opt,name=credentials,proto3" json:"credentials,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *UpdateAWSCredentialsMsg) Reset()         { *m = UpdateAWSCredentialsMsg{} }
func (m *UpdateAWSCredentialsMsg) String() string { return proto.CompactTextString(m) }
func (*UpdateAWSCredentialsMsg) ProtoMessage()    {}
func (*UpdateAWSCredentialsMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{35}
}
func (m *UpdateAWSCredentialsMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateAWSCredentialsMsg.Unmarshal(m, b)
}
func (m *UpdateAWSCredentialsMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateAWSCredentialsMsg.Marshal(b, m, deterministic)
}
func (dst *UpdateAWSCredentialsMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAWSCredentialsMsg.Merge(dst, src)
}
func (m *UpdateAWSCredentialsMsg) XXX_Size() int {
	return xxx_messageInfo_UpdateAWSCredentialsMsg.Size(m)
}
func (m *UpdateAWSCredentialsMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAWSCredentialsMsg.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAWSCredentialsMsg proto.InternalMessageInfo

func (m *UpdateAWSCredentialsMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateAWSCredentialsMsg) GetCredentials() *AWSCredentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

type UpdateAWSCredentialsReply struct {
	// Was this a successful request
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateAWSCredentialsReply) Reset()         { *m = UpdateAWSCredentialsReply{} }
func (m *UpdateAWSCredentialsReply) String() string { return proto.CompactTextString(m) }
func (*UpdateAWSCredentialsReply) ProtoMessage()    {}
func (*UpdateAWSCredentialsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{36}
}
func (m *UpdateAWSCredentialsReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateAWSCredentialsReply.Unmarshal(m, b)
}
func (m *UpdateAWSCredentialsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateAWSCredentialsReply.Marshal(b, m, deterministic)
}
func (dst *UpdateAWSCredentialsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAWSCredentialsReply.Merge(dst, src)
}
func (m *UpdateAWSCredentialsReply) XXX_Size() int {
	return xxx_messageInfo_UpdateAWSCredentialsReply.Size(m)
}
func (m *UpdateAWSCredentialsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAWSCredentialsReply.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAWSCredentialsReply proto.InternalMessageInfo

func (m *UpdateAWSCredentialsReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type UpdateAzureCredentialsMsg struct {
	// Cluster name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Credentials to build the cluster
	Credentials          *AzureCredentials `protobuf:"bytes,2,opt,name=credentials,proto3" json:"credentials,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UpdateAzureCredentialsMsg) Reset()         { *m = UpdateAzureCredentialsMsg{} }
func (m *UpdateAzureCredentialsMsg) String() string { return proto.CompactTextString(m) }
func (*UpdateAzureCredentialsMsg) ProtoMessage()    {}
func (*UpdateAzureCredentialsMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{37}
}
func (m *UpdateAzureCredentialsMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateAzureCredentialsMsg.Unmarshal(m, b)
}
func (m *UpdateAzureCredentialsMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateAzureCredentialsMsg.Marshal(b, m, deterministic)
}
func (dst *UpdateAzureCredentialsMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAzureCredentialsMsg.Merge(dst, src)
}
func (m *UpdateAzureCredentialsMsg) XXX_Size() int {
	return xxx_messageInfo_UpdateAzureCredentialsMsg.Size(m)
}
func (m *UpdateAzureCredentialsMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAzureCredentialsMsg.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAzureCredentialsMsg proto.InternalMessageInfo

func (m *UpdateAzureCredentialsMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateAzureCredentialsMsg) GetCredentials() *AzureCredentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

type UpdateAzureCredentialsReply struct {
	// Was this a successful request
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateAzureCredentialsReply) Reset()         { *m = UpdateAzureCredentialsReply{} }
func (m *UpdateAzureCredentialsReply) String() string { return proto.CompactTextString(m) }
func (*UpdateAzureCredentialsReply) ProtoMessage()    {}
func (*UpdateAzureCredentialsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cc7d1b9dca89666e, []int{38}
}
func (m *UpdateAzureCredentialsReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateAzureCredentialsReply.Unmarshal(m, b)
}
func (m *UpdateAzureCredentialsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateAzureCredentialsReply.Marshal(b, m, deterministic)
}
func (dst *UpdateAzureCredentialsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAzureCredentialsReply.Merge(dst, src)
}
func (m *UpdateAzureCredentialsReply) XXX_Size() int {
	return xxx_messageInfo_UpdateAzureCredentialsReply.Size(m)
}
func (m *UpdateAzureCredentialsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAzureCredentialsReply.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAzureCredentialsReply proto.InternalMessageInfo

func (m *UpdateAzureCredentialsReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func init() {
	proto.RegisterType((*Callback)(nil), "cluster_manager_api.Callback")
	proto.RegisterType((*CreateClusterMsg)(nil), "cluster_manager_api.CreateClusterMsg")
	proto.RegisterType((*CreateClusterReply)(nil), "cluster_manager_api.CreateClusterReply")
	proto.RegisterType((*GetClusterMsg)(nil), "cluster_manager_api.GetClusterMsg")
	proto.RegisterType((*GetClusterReply)(nil), "cluster_manager_api.GetClusterReply")
	proto.RegisterType((*DeleteClusterMsg)(nil), "cluster_manager_api.DeleteClusterMsg")
	proto.RegisterType((*DeleteClusterReply)(nil), "cluster_manager_api.DeleteClusterReply")
	proto.RegisterType((*GetClusterListMsg)(nil), "cluster_manager_api.GetClusterListMsg")
	proto.RegisterType((*GetClusterListReply)(nil), "cluster_manager_api.GetClusterListReply")
	proto.RegisterType((*ClusterItem)(nil), "cluster_manager_api.ClusterItem")
	proto.RegisterType((*ClusterDetailItem)(nil), "cluster_manager_api.ClusterDetailItem")
	proto.RegisterType((*CreateClusterProviderSpec)(nil), "cluster_manager_api.CreateClusterProviderSpec")
	proto.RegisterType((*CreateClusterAWSSpec)(nil), "cluster_manager_api.CreateClusterAWSSpec")
	proto.RegisterType((*CreateClusterAWSSpec_AWSDataCenter)(nil), "cluster_manager_api.CreateClusterAWSSpec.AWSDataCenter")
	proto.RegisterType((*CreateClusterAWSSpec_AWSPreconfiguredItems)(nil), "cluster_manager_api.CreateClusterAWSSpec.AWSPreconfiguredItems")
	proto.RegisterType((*CreateClusterAWSSpec_AWSInstanceGroup)(nil), "cluster_manager_api.CreateClusterAWSSpec.AWSInstanceGroup")
	proto.RegisterType((*GetVersionMsg)(nil), "cluster_manager_api.GetVersionMsg")
	proto.RegisterType((*GetVersionReply)(nil), "cluster_manager_api.GetVersionReply")
	proto.RegisterType((*GetVersionReply_VersionInformation)(nil), "cluster_manager_api.GetVersionReply.VersionInformation")
	proto.RegisterType((*AWSCredentials)(nil), "cluster_manager_api.AWSCredentials")
	proto.RegisterType((*AzureCredentials)(nil), "cluster_manager_api.AzureCredentials")
	proto.RegisterType((*AzureClusterServiceAccount)(nil), "cluster_manager_api.AzureClusterServiceAccount")
	proto.RegisterType((*CreateClusterAKSSpec)(nil), "cluster_manager_api.CreateClusterAKSSpec")
	proto.RegisterType((*CreateClusterAKSSpec_AKSInstanceGroup)(nil), "cluster_manager_api.CreateClusterAKSSpec.AKSInstanceGroup")
	proto.RegisterType((*CreateClusterVMWareSpec)(nil), "cluster_manager_api.CreateClusterVMWareSpec")
	proto.RegisterType((*KubernetesLabel)(nil), "cluster_manager_api.KubernetesLabel")
	proto.RegisterType((*VMWareMachineSpec)(nil), "cluster_manager_api.VMWareMachineSpec")
	proto.RegisterType((*ProvisionTillerMsg)(nil), "cluster_manager_api.ProvisionTillerMsg")
	proto.RegisterType((*ProvisionTillerReply)(nil), "cluster_manager_api.ProvisionTillerReply")
	proto.RegisterType((*InstallHelmChartMsg)(nil), "cluster_manager_api.InstallHelmChartMsg")
	proto.RegisterType((*InstallHelmChartReply)(nil), "cluster_manager_api.InstallHelmChartReply")
	proto.RegisterType((*DeleteHelmChartMsg)(nil), "cluster_manager_api.DeleteHelmChartMsg")
	proto.RegisterType((*DeleteHelmChartReply)(nil), "cluster_manager_api.DeleteHelmChartReply")
	proto.RegisterType((*GenericHelmChart)(nil), "cluster_manager_api.GenericHelmChart")
	proto.RegisterType((*GenericHelmChart_ChartRepository)(nil), "cluster_manager_api.GenericHelmChart.ChartRepository")
	proto.RegisterType((*GetUpgradeClusterInformationMsg)(nil), "cluster_manager_api.GetUpgradeClusterInformationMsg")
	proto.RegisterType((*GetUpgradeClusterInformationReply)(nil), "cluster_manager_api.GetUpgradeClusterInformationReply")
	proto.RegisterType((*UpgradeClusterMsg)(nil), "cluster_manager_api.UpgradeClusterMsg")
	proto.RegisterType((*UpgradeClusterReply)(nil), "cluster_manager_api.UpgradeClusterReply")
	proto.RegisterType((*AdjustClusterMsg)(nil), "cluster_manager_api.AdjustClusterMsg")
	proto.RegisterType((*AdjustClusterMsg_AdjustClusterVMWareSpec)(nil), "cluster_manager_api.AdjustClusterMsg.AdjustClusterVMWareSpec")
	proto.RegisterType((*AdjustClusterMsg_VMWareRemoveMachineSpec)(nil), "cluster_manager_api.AdjustClusterMsg.VMWareRemoveMachineSpec")
	proto.RegisterType((*AdjustClusterMsg_AdjustClusterAKSSpec)(nil), "cluster_manager_api.AdjustClusterMsg.AdjustClusterAKSSpec")
	proto.RegisterType((*AdjustClusterReply)(nil), "cluster_manager_api.AdjustClusterReply")
	proto.RegisterType((*UpdateAWSCredentialsMsg)(nil), "cluster_manager_api.UpdateAWSCredentialsMsg")
	proto.RegisterType((*UpdateAWSCredentialsReply)(nil), "cluster_manager_api.UpdateAWSCredentialsReply")
	proto.RegisterType((*UpdateAzureCredentialsMsg)(nil), "cluster_manager_api.UpdateAzureCredentialsMsg")
	proto.RegisterType((*UpdateAzureCredentialsReply)(nil), "cluster_manager_api.UpdateAzureCredentialsReply")
	proto.RegisterEnum("cluster_manager_api.Provider", Provider_name, Provider_value)
	proto.RegisterEnum("cluster_manager_api.ClusterStatus", ClusterStatus_name, ClusterStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClusterClient is the client API for Cluster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClusterClient interface {
	// Will provision a cluster
	CreateCluster(ctx context.Context, in *CreateClusterMsg, opts ...grpc.CallOption) (*CreateClusterReply, error)
	// Will retrieve the status of a cluster and its kubeconfig for connectivity
	GetCluster(ctx context.Context, in *GetClusterMsg, opts ...grpc.CallOption) (*GetClusterReply, error)
	// Will delete a cluster
	DeleteCluster(ctx context.Context, in *DeleteClusterMsg, opts ...grpc.CallOption) (*DeleteClusterReply, error)
	// Will adjust a provision a cluster
	AdjustClusterNodes(ctx context.Context, in *AdjustClusterMsg, opts ...grpc.CallOption) (*AdjustClusterReply, error)
	// Will retrieve a list of clusters
	GetClusterList(ctx context.Context, in *GetClusterListMsg, opts ...grpc.CallOption) (*GetClusterListReply, error)
	// Will install (or reinstall) tiller
	ProvisionTiller(ctx context.Context, in *ProvisionTillerMsg, opts ...grpc.CallOption) (*ProvisionTillerReply, error)
	// Will install (or reinstall) helm chart
	// This will be destructive if a chart has already been deployed with the same name
	InstallHelmChart(ctx context.Context, in *InstallHelmChartMsg, opts ...grpc.CallOption) (*InstallHelmChartReply, error)
	// Will delete deployed helm chart
	DeleteHelmChart(ctx context.Context, in *DeleteHelmChartMsg, opts ...grpc.CallOption) (*DeleteHelmChartReply, error)
	// Will return version information about api server
	GetVersionInformation(ctx context.Context, in *GetVersionMsg, opts ...grpc.CallOption) (*GetVersionReply, error)
	// Will return upgrade options for a given cluster
	GetUpgradeClusterInformation(ctx context.Context, in *GetUpgradeClusterInformationMsg, opts ...grpc.CallOption) (*GetUpgradeClusterInformationReply, error)
	// Will attempt to upgrade a cluster
	UpgradeCluster(ctx context.Context, in *UpgradeClusterMsg, opts ...grpc.CallOption) (*UpgradeClusterReply, error)
	// Will update aws credentials used for a cluster
	UpdateAWSCredentials(ctx context.Context, in *UpdateAWSCredentialsMsg, opts ...grpc.CallOption) (*UpdateAWSCredentialsReply, error)
	// Will update azure credentials used for a cluster
	UpdateAzureCredentials(ctx context.Context, in *UpdateAzureCredentialsMsg, opts ...grpc.CallOption) (*UpdateAzureCredentialsReply, error)
}

type clusterClient struct {
	cc *grpc.ClientConn
}

func NewClusterClient(cc *grpc.ClientConn) ClusterClient {
	return &clusterClient{cc}
}

func (c *clusterClient) CreateCluster(ctx context.Context, in *CreateClusterMsg, opts ...grpc.CallOption) (*CreateClusterReply, error) {
	out := new(CreateClusterReply)
	err := c.cc.Invoke(ctx, "/cluster_manager_api.Cluster/CreateCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) GetCluster(ctx context.Context, in *GetClusterMsg, opts ...grpc.CallOption) (*GetClusterReply, error) {
	out := new(GetClusterReply)
	err := c.cc.Invoke(ctx, "/cluster_manager_api.Cluster/GetCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) DeleteCluster(ctx context.Context, in *DeleteClusterMsg, opts ...grpc.CallOption) (*DeleteClusterReply, error) {
	out := new(DeleteClusterReply)
	err := c.cc.Invoke(ctx, "/cluster_manager_api.Cluster/DeleteCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) AdjustClusterNodes(ctx context.Context, in *AdjustClusterMsg, opts ...grpc.CallOption) (*AdjustClusterReply, error) {
	out := new(AdjustClusterReply)
	err := c.cc.Invoke(ctx, "/cluster_manager_api.Cluster/AdjustClusterNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) GetClusterList(ctx context.Context, in *GetClusterListMsg, opts ...grpc.CallOption) (*GetClusterListReply, error) {
	out := new(GetClusterListReply)
	err := c.cc.Invoke(ctx, "/cluster_manager_api.Cluster/GetClusterList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) ProvisionTiller(ctx context.Context, in *ProvisionTillerMsg, opts ...grpc.CallOption) (*ProvisionTillerReply, error) {
	out := new(ProvisionTillerReply)
	err := c.cc.Invoke(ctx, "/cluster_manager_api.Cluster/ProvisionTiller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) InstallHelmChart(ctx context.Context, in *InstallHelmChartMsg, opts ...grpc.CallOption) (*InstallHelmChartReply, error) {
	out := new(InstallHelmChartReply)
	err := c.cc.Invoke(ctx, "/cluster_manager_api.Cluster/InstallHelmChart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) DeleteHelmChart(ctx context.Context, in *DeleteHelmChartMsg, opts ...grpc.CallOption) (*DeleteHelmChartReply, error) {
	out := new(DeleteHelmChartReply)
	err := c.cc.Invoke(ctx, "/cluster_manager_api.Cluster/DeleteHelmChart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) GetVersionInformation(ctx context.Context, in *GetVersionMsg, opts ...grpc.CallOption) (*GetVersionReply, error) {
	out := new(GetVersionReply)
	err := c.cc.Invoke(ctx, "/cluster_manager_api.Cluster/GetVersionInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) GetUpgradeClusterInformation(ctx context.Context, in *GetUpgradeClusterInformationMsg, opts ...grpc.CallOption) (*GetUpgradeClusterInformationReply, error) {
	out := new(GetUpgradeClusterInformationReply)
	err := c.cc.Invoke(ctx, "/cluster_manager_api.Cluster/GetUpgradeClusterInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) UpgradeCluster(ctx context.Context, in *UpgradeClusterMsg, opts ...grpc.CallOption) (*UpgradeClusterReply, error) {
	out := new(UpgradeClusterReply)
	err := c.cc.Invoke(ctx, "/cluster_manager_api.Cluster/UpgradeCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) UpdateAWSCredentials(ctx context.Context, in *UpdateAWSCredentialsMsg, opts ...grpc.CallOption) (*UpdateAWSCredentialsReply, error) {
	out := new(UpdateAWSCredentialsReply)
	err := c.cc.Invoke(ctx, "/cluster_manager_api.Cluster/UpdateAWSCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) UpdateAzureCredentials(ctx context.Context, in *UpdateAzureCredentialsMsg, opts ...grpc.CallOption) (*UpdateAzureCredentialsReply, error) {
	out := new(UpdateAzureCredentialsReply)
	err := c.cc.Invoke(ctx, "/cluster_manager_api.Cluster/UpdateAzureCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterServer is the server API for Cluster service.
type ClusterServer interface {
	// Will provision a cluster
	CreateCluster(context.Context, *CreateClusterMsg) (*CreateClusterReply, error)
	// Will retrieve the status of a cluster and its kubeconfig for connectivity
	GetCluster(context.Context, *GetClusterMsg) (*GetClusterReply, error)
	// Will delete a cluster
	DeleteCluster(context.Context, *DeleteClusterMsg) (*DeleteClusterReply, error)
	// Will adjust a provision a cluster
	AdjustClusterNodes(context.Context, *AdjustClusterMsg) (*AdjustClusterReply, error)
	// Will retrieve a list of clusters
	GetClusterList(context.Context, *GetClusterListMsg) (*GetClusterListReply, error)
	// Will install (or reinstall) tiller
	ProvisionTiller(context.Context, *ProvisionTillerMsg) (*ProvisionTillerReply, error)
	// Will install (or reinstall) helm chart
	// This will be destructive if a chart has already been deployed with the same name
	InstallHelmChart(context.Context, *InstallHelmChartMsg) (*InstallHelmChartReply, error)
	// Will delete deployed helm chart
	DeleteHelmChart(context.Context, *DeleteHelmChartMsg) (*DeleteHelmChartReply, error)
	// Will return version information about api server
	GetVersionInformation(context.Context, *GetVersionMsg) (*GetVersionReply, error)
	// Will return upgrade options for a given cluster
	GetUpgradeClusterInformation(context.Context, *GetUpgradeClusterInformationMsg) (*GetUpgradeClusterInformationReply, error)
	// Will attempt to upgrade a cluster
	UpgradeCluster(context.Context, *UpgradeClusterMsg) (*UpgradeClusterReply, error)
	// Will update aws credentials used for a cluster
	UpdateAWSCredentials(context.Context, *UpdateAWSCredentialsMsg) (*UpdateAWSCredentialsReply, error)
	// Will update azure credentials used for a cluster
	UpdateAzureCredentials(context.Context, *UpdateAzureCredentialsMsg) (*UpdateAzureCredentialsReply, error)
}

func RegisterClusterServer(s *grpc.Server, srv ClusterServer) {
	s.RegisterService(&_Cluster_serviceDesc, srv)
}

func _Cluster_CreateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClusterMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).CreateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_manager_api.Cluster/CreateCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).CreateCluster(ctx, req.(*CreateClusterMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_GetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).GetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_manager_api.Cluster/GetCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).GetCluster(ctx, req.(*GetClusterMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_DeleteCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClusterMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).DeleteCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_manager_api.Cluster/DeleteCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).DeleteCluster(ctx, req.(*DeleteClusterMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_AdjustClusterNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdjustClusterMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).AdjustClusterNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_manager_api.Cluster/AdjustClusterNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).AdjustClusterNodes(ctx, req.(*AdjustClusterMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_GetClusterList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterListMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).GetClusterList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_manager_api.Cluster/GetClusterList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).GetClusterList(ctx, req.(*GetClusterListMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_ProvisionTiller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvisionTillerMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).ProvisionTiller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_manager_api.Cluster/ProvisionTiller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).ProvisionTiller(ctx, req.(*ProvisionTillerMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_InstallHelmChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallHelmChartMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).InstallHelmChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_manager_api.Cluster/InstallHelmChart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).InstallHelmChart(ctx, req.(*InstallHelmChartMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_DeleteHelmChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHelmChartMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).DeleteHelmChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_manager_api.Cluster/DeleteHelmChart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).DeleteHelmChart(ctx, req.(*DeleteHelmChartMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_GetVersionInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).GetVersionInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_manager_api.Cluster/GetVersionInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).GetVersionInformation(ctx, req.(*GetVersionMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_GetUpgradeClusterInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUpgradeClusterInformationMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).GetUpgradeClusterInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_manager_api.Cluster/GetUpgradeClusterInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).GetUpgradeClusterInformation(ctx, req.(*GetUpgradeClusterInformationMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_UpgradeCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeClusterMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).UpgradeCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_manager_api.Cluster/UpgradeCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).UpgradeCluster(ctx, req.(*UpgradeClusterMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_UpdateAWSCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAWSCredentialsMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).UpdateAWSCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_manager_api.Cluster/UpdateAWSCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).UpdateAWSCredentials(ctx, req.(*UpdateAWSCredentialsMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_UpdateAzureCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAzureCredentialsMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).UpdateAzureCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_manager_api.Cluster/UpdateAzureCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).UpdateAzureCredentials(ctx, req.(*UpdateAzureCredentialsMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cluster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cluster_manager_api.Cluster",
	HandlerType: (*ClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCluster",
			Handler:    _Cluster_CreateCluster_Handler,
		},
		{
			MethodName: "GetCluster",
			Handler:    _Cluster_GetCluster_Handler,
		},
		{
			MethodName: "DeleteCluster",
			Handler:    _Cluster_DeleteCluster_Handler,
		},
		{
			MethodName: "AdjustClusterNodes",
			Handler:    _Cluster_AdjustClusterNodes_Handler,
		},
		{
			MethodName: "GetClusterList",
			Handler:    _Cluster_GetClusterList_Handler,
		},
		{
			MethodName: "ProvisionTiller",
			Handler:    _Cluster_ProvisionTiller_Handler,
		},
		{
			MethodName: "InstallHelmChart",
			Handler:    _Cluster_InstallHelmChart_Handler,
		},
		{
			MethodName: "DeleteHelmChart",
			Handler:    _Cluster_DeleteHelmChart_Handler,
		},
		{
			MethodName: "GetVersionInformation",
			Handler:    _Cluster_GetVersionInformation_Handler,
		},
		{
			MethodName: "GetUpgradeClusterInformation",
			Handler:    _Cluster_GetUpgradeClusterInformation_Handler,
		},
		{
			MethodName: "UpgradeCluster",
			Handler:    _Cluster_UpgradeCluster_Handler,
		},
		{
			MethodName: "UpdateAWSCredentials",
			Handler:    _Cluster_UpdateAWSCredentials_Handler,
		},
		{
			MethodName: "UpdateAzureCredentials",
			Handler:    _Cluster_UpdateAzureCredentials_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_api_cc7d1b9dca89666e) }

var fileDescriptor_api_cc7d1b9dca89666e = []byte{
	// 2765 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x5a, 0xcd, 0x6f, 0xe3, 0xc6,
	0x15, 0x0f, 0x25, 0x5b, 0x96, 0x9e, 0x64, 0x49, 0x1e, 0x7b, 0xbd, 0x5e, 0x66, 0x93, 0x78, 0x99,
	0xdd, 0x6c, 0xd6, 0x89, 0xed, 0x74, 0xd3, 0x34, 0x89, 0x93, 0xa0, 0x51, 0x64, 0xc7, 0x51, 0x1d,
	0x7b, 0x5d, 0x7a, 0xbd, 0x5b, 0x04, 0x68, 0x95, 0x31, 0x39, 0x2b, 0x4f, 0x4c, 0x91, 0x0c, 0x49,
	0xd9, 0xeb, 0xa4, 0x28, 0xb6, 0x3d, 0xe4, 0x5c, 0xb4, 0x3d, 0xf4, 0xd8, 0x7b, 0x91, 0x43, 0x0f,
	0xbd, 0x14, 0x05, 0x5a, 0x14, 0x28, 0xd0, 0x73, 0xfb, 0x07, 0xf4, 0xd0, 0x9c, 0x8b, 0x9e, 0x7a,
	0x28, 0xd0, 0xa0, 0x98, 0x0f, 0x52, 0x24, 0x45, 0xd9, 0x92, 0x13, 0xb4, 0x48, 0x4f, 0xd6, 0x3c,
	0xbe, 0x79, 0xf3, 0xde, 0xef, 0x7d, 0xcc, 0xbc, 0x19, 0x43, 0x09, 0xbb, 0x74, 0xc5, 0xf5, 0x9c,
	0xc0, 0x41, 0xb3, 0x86, 0xd5, 0xf3, 0x03, 0xe2, 0xb5, 0xbb, 0xd8, 0xc6, 0x1d, 0xe2, 0xb5, 0xb1,
	0x4b, 0xd5, 0xab, 0x1d, 0xc7, 0xe9, 0x58, 0x64, 0x15, 0xbb, 0x74, 0x15, 0xdb, 0xb6, 0x13, 0xe0,
	0x80, 0x3a, 0xb6, 0x2f, 0xa6, 0xa8, 0xcf, 0xf3, 0x3f, 0xc6, 0x72, 0x87, 0xd8, 0xcb, 0xfe, 0x09,
	0xee, 0x74, 0x88, 0xb7, 0xea, 0xb8, 0x9c, 0x63, 0x90, 0x5b, 0x7b, 0x0d, 0x8a, 0x4d, 0x6c, 0x59,
	0x07, 0xd8, 0x38, 0x42, 0x75, 0xc8, 0xf7, 0x3c, 0x6b, 0x41, 0x59, 0x54, 0x9e, 0x2d, 0xe9, 0xec,
	0x27, 0x7a, 0x02, 0xc0, 0x23, 0x1f, 0xf6, 0x88, 0x1f, 0xb4, 0xa9, 0xb9, 0x90, 0xe3, 0x1f, 0x4a,
	0x92, 0xd2, 0x32, 0xb5, 0x4f, 0x15, 0xa8, 0x37, 0x3d, 0x82, 0x03, 0xd2, 0x14, 0x6a, 0x6e, 0xfb,
	0x1d, 0x84, 0x60, 0xc2, 0xc6, 0x5d, 0x22, 0xc5, 0xf0, 0xdf, 0xe8, 0x5b, 0x50, 0x74, 0x3d, 0xe7,
	0x98, 0x9a, 0xc4, 0xe3, 0x52, 0xca, 0xb7, 0x57, 0x56, 0x32, 0x2c, 0x5b, 0x49, 0x08, 0xdb, 0x95,
	0x33, 0xf6, 0x5c, 0x62, 0xe8, 0xd1, 0x7c, 0xf4, 0x2a, 0x14, 0x0d, 0xa9, 0xf1, 0x42, 0x9e, 0xcb,
	0x7a, 0x22, 0x5b, 0x96, 0x64, 0xd2, 0x23, 0x76, 0xed, 0x7d, 0x40, 0x89, 0x15, 0x74, 0xe2, 0x5a,
	0xa7, 0xa8, 0x0a, 0x39, 0xe7, 0x88, 0xab, 0x5b, 0xd4, 0x73, 0xce, 0x11, 0x5a, 0x83, 0x29, 0x29,
	0x4f, 0xea, 0xba, 0x98, 0x2d, 0x5f, 0xd0, 0x5a, 0x01, 0xe9, 0xea, 0xe1, 0x04, 0xed, 0xcf, 0x0a,
	0x4c, 0x6f, 0x92, 0xe0, 0x1c, 0x38, 0x5e, 0x82, 0x3c, 0x3e, 0xf1, 0xa5, 0xf4, 0xa7, 0x33, 0xa5,
	0x37, 0xee, 0xef, 0x35, 0x3d, 0x62, 0x12, 0x3b, 0xa0, 0xd8, 0xf2, 0x75, 0xc6, 0x8f, 0x5e, 0x83,
	0x49, 0xfc, 0x51, 0xcf, 0x23, 0xd2, 0xec, 0x1b, 0xd9, 0x13, 0x19, 0x47, 0x7c, 0xaa, 0x98, 0xc3,
	0x60, 0x8b, 0x5c, 0x30, 0xb1, 0xa8, 0x3c, 0x5b, 0x1d, 0x02, 0x5b, 0x88, 0x7a, 0x1f, 0x71, 0xcd,
	0x80, 0x5a, 0xdf, 0xa6, 0x6c, 0xcc, 0xde, 0x4c, 0x63, 0xf6, 0xcc, 0x59, 0x98, 0xad, 0x93, 0x00,
	0x53, 0x2b, 0x89, 0xdc, 0x8f, 0x73, 0x50, 0x5f, 0x27, 0x16, 0x39, 0x37, 0x96, 0xbe, 0x5a, 0xe0,
	0x25, 0xc2, 0x75, 0x72, 0xbc, 0x70, 0x7d, 0x1d, 0x50, 0x02, 0x91, 0x6c, 0xe8, 0xe7, 0xa1, 0xe0,
	0x07, 0x38, 0xe8, 0xf9, 0x32, 0x3f, 0xe5, 0x48, 0xfb, 0x83, 0x02, 0x33, 0x7d, 0xb7, 0xbd, 0x4b,
	0xfd, 0x80, 0x21, 0x2a, 0xd1, 0x53, 0x2e, 0x8a, 0x5e, 0xee, 0xbf, 0x1d, 0x7a, 0xb3, 0x49, 0x1b,
	0xb2, 0x31, 0x78, 0x1d, 0x8a, 0x52, 0x20, 0x43, 0x21, 0x3f, 0x52, 0xce, 0x46, 0x33, 0xb4, 0x9f,
	0x29, 0x50, 0x8e, 0x7d, 0x61, 0xd2, 0xa9, 0x29, 0x63, 0x2e, 0x47, 0xcd, 0x28, 0x0a, 0x73, 0xb1,
	0x28, 0xbc, 0x01, 0x55, 0x81, 0x73, 0xbb, 0x4b, 0x7c, 0x1f, 0x77, 0x44, 0x5c, 0x95, 0xf4, 0x69,
	0x41, 0xdd, 0x16, 0x44, 0xb4, 0x16, 0x39, 0x47, 0x18, 0xae, 0x9d, 0xa5, 0xd6, 0x1e, 0xe7, 0x8c,
	0x1c, 0xf8, 0x1b, 0x05, 0x66, 0x06, 0x12, 0xe6, 0xcb, 0x54, 0xee, 0x49, 0x80, 0xa3, 0xde, 0x01,
	0x31, 0x1c, 0xfb, 0x01, 0xed, 0x70, 0x05, 0x4b, 0x7a, 0x8c, 0x12, 0x53, 0x7e, 0x72, 0x6c, 0xe5,
	0x3f, 0xc9, 0xc3, 0x95, 0xa1, 0xd5, 0x3c, 0x33, 0xaf, 0x9f, 0x82, 0xf2, 0xd1, 0x2b, 0x7e, 0xfb,
	0x98, 0x78, 0x3e, 0x75, 0x6c, 0x69, 0x0f, 0x1c, 0xbd, 0xe2, 0xdf, 0x13, 0x14, 0xf4, 0x86, 0x08,
	0x5d, 0x91, 0xbf, 0xb7, 0xce, 0xdf, 0x3f, 0x1a, 0xf7, 0xf7, 0xd8, 0x62, 0xef, 0x3c, 0x26, 0x42,
	0xb8, 0x11, 0x86, 0xf0, 0xc4, 0xc8, 0x02, 0xb6, 0x42, 0x01, 0x32, 0x90, 0xdf, 0x86, 0xc2, 0x71,
	0xf7, 0x04, 0x7b, 0x64, 0x61, 0x8a, 0xcb, 0x78, 0xfe, 0x7c, 0x19, 0xf7, 0xb6, 0xef, 0x63, 0x8f,
	0x48, 0x31, 0x72, 0x36, 0x7a, 0x0e, 0x66, 0x0e, 0x69, 0xe7, 0xb0, 0x8d, 0x8f, 0x31, 0xb5, 0xf0,
	0x01, 0xb5, 0x68, 0x70, 0xca, 0x31, 0x2e, 0xea, 0x75, 0xf6, 0xa1, 0x11, 0xa3, 0x33, 0x67, 0xda,
	0x24, 0x38, 0x71, 0xbc, 0xa3, 0xf6, 0x03, 0x7c, 0xe0, 0x51, 0x63, 0xa1, 0x20, 0x9c, 0x29, 0xa9,
	0x6f, 0x73, 0xe2, 0x5b, 0xf3, 0x30, 0x17, 0x66, 0x4d, 0x9b, 0xda, 0x0f, 0x1c, 0xaf, 0xcb, 0xf7,
	0x79, 0xed, 0x77, 0x93, 0x30, 0x97, 0x05, 0x0b, 0xfa, 0x0e, 0x94, 0x4d, 0x1c, 0xe0, 0xb6, 0x41,
	0x6c, 0x56, 0xb6, 0x45, 0x45, 0x78, 0x79, 0x64, 0x58, 0x59, 0x99, 0x58, 0xc7, 0x01, 0x6e, 0xf2,
	0xe9, 0x3a, 0x98, 0xd1, 0x6f, 0xb4, 0x01, 0x65, 0xa3, 0x5f, 0x05, 0xc6, 0xa9, 0xd4, 0xf1, 0x79,
	0xe8, 0xbb, 0x50, 0xf2, 0x88, 0xef, 0xf4, 0x3c, 0x83, 0x84, 0x5e, 0xff, 0xe6, 0x58, 0xea, 0xed,
	0x7a, 0x32, 0x92, 0x7b, 0x1e, 0x31, 0x59, 0xf2, 0xf8, 0x7a, 0x5f, 0x22, 0x32, 0xa0, 0x46, 0x6d,
	0x3f, 0xc0, 0xb6, 0x41, 0xda, 0x1d, 0xcf, 0xe9, 0xb9, 0x2c, 0x47, 0x59, 0xe9, 0x58, 0x1b, 0x6b,
	0x91, 0x96, 0x94, 0xb1, 0xc9, 0x44, 0xe8, 0x55, 0x1a, 0x1f, 0xfa, 0xea, 0x3d, 0x98, 0x4e, 0xe0,
	0xc4, 0xaa, 0xb5, 0x47, 0x3a, 0x2c, 0xc0, 0x45, 0xec, 0xcb, 0x11, 0x5a, 0x06, 0x14, 0x8f, 0x86,
	0xf6, 0x47, 0x8e, 0x4d, 0x44, 0x2d, 0x2b, 0xe9, 0x33, 0xf1, 0x2f, 0xef, 0xb1, 0x0f, 0xea, 0xf7,
	0xe1, 0x52, 0xa6, 0x81, 0xe8, 0x12, 0x14, 0x8e, 0x5d, 0xa3, 0x1d, 0x95, 0x88, 0xc9, 0x63, 0xd7,
	0x68, 0x99, 0x68, 0x09, 0x66, 0x7c, 0x62, 0xf4, 0x3c, 0x26, 0x9a, 0x1b, 0xdb, 0x3f, 0xcf, 0xd5,
	0xc2, 0x0f, 0x5c, 0xe5, 0x96, 0x89, 0x16, 0xa1, 0x42, 0x71, 0xb7, 0xed, 0x39, 0x16, 0x69, 0x63,
	0xcf, 0x96, 0xb5, 0x03, 0x28, 0xee, 0xea, 0x8e, 0x45, 0x1a, 0x9e, 0xad, 0x5a, 0x50, 0x4f, 0x5b,
	0xce, 0x52, 0x3a, 0x38, 0x75, 0xa3, 0x94, 0x66, 0xbf, 0xd1, 0x35, 0xa8, 0x74, 0xa9, 0xdd, 0xfe,
	0xb0, 0x87, 0xed, 0x80, 0x85, 0x38, 0x5b, 0x70, 0x52, 0x2f, 0x77, 0xa9, 0xfd, 0x6d, 0x49, 0xe2,
	0x2c, 0xf8, 0x61, 0x9f, 0x25, 0x2f, 0x59, 0xf0, 0xc3, 0x90, 0x45, 0xab, 0xf1, 0x23, 0x95, 0xac,
	0x02, 0xdb, 0x7e, 0x47, 0xfb, 0x3c, 0xc7, 0x0f, 0x24, 0x92, 0x92, 0xbd, 0x23, 0x1c, 0xc2, 0xac,
	0xac, 0x24, 0xf1, 0x6c, 0x90, 0xb1, 0x98, 0x1d, 0xe5, 0x29, 0x91, 0x2b, 0x72, 0xd0, 0xea, 0x4f,
	0xd7, 0xd1, 0xf1, 0x00, 0x4d, 0xfd, 0x87, 0x02, 0x68, 0x90, 0x95, 0x95, 0xb3, 0x0e, 0x0d, 0xa2,
	0x72, 0x26, 0x60, 0x81, 0x0e, 0x0d, 0xd7, 0x60, 0x67, 0x6b, 0xc6, 0x60, 0x38, 0xdd, 0x2e, 0x0d,
	0xc2, 0xb3, 0x75, 0x87, 0x06, 0x4d, 0x4e, 0x40, 0xd7, 0xa1, 0xca, 0x3e, 0x07, 0x1e, 0x21, 0x6d,
	0x56, 0x53, 0xc3, 0x1a, 0x5e, 0xe9, 0xd0, 0xe0, 0xae, 0x47, 0x08, 0xab, 0xb7, 0x84, 0x09, 0x39,
	0xe8, 0x51, 0xcb, 0x6c, 0x9b, 0x8c, 0x43, 0x94, 0xf0, 0x12, 0xa7, 0xac, 0xcb, 0xcf, 0x1d, 0x27,
	0xd2, 0x61, 0x52, 0xae, 0xe1, 0x84, 0x2a, 0xa8, 0x50, 0x34, 0x9c, 0xae, 0x4b, 0x2d, 0xe2, 0xc9,
	0xa2, 0x12, 0x8d, 0xd9, 0x37, 0xd7, 0xc2, 0x01, 0x33, 0x88, 0x57, 0xbb, 0x92, 0x1e, 0x8d, 0xb5,
	0x87, 0x50, 0x4d, 0x26, 0x2e, 0xd2, 0x60, 0xda, 0x27, 0x86, 0x47, 0x82, 0xf6, 0x11, 0x39, 0xed,
	0x47, 0x5f, 0x59, 0x10, 0xb7, 0xc8, 0x69, 0x14, 0x83, 0x8c, 0x07, 0x1b, 0x06, 0xf1, 0x7d, 0xc6,
	0x1a, 0x8b, 0x41, 0x8f, 0x04, 0x0d, 0x4e, 0xdf, 0x22, 0xa7, 0xb1, 0x34, 0xc9, 0xc7, 0xd3, 0x44,
	0xfb, 0x44, 0x81, 0x7a, 0xfa, 0x98, 0xc1, 0x62, 0x1e, 0xbb, 0x6e, 0x2c, 0xe6, 0xb1, 0xcb, 0xe2,
	0x78, 0x1e, 0x0a, 0x01, 0xb1, 0xb1, 0x1d, 0x82, 0x2b, 0x47, 0xdc, 0x32, 0xec, 0xfb, 0x27, 0x8e,
	0x67, 0x4a, 0xe9, 0xd1, 0x18, 0xdd, 0x84, 0x9a, 0xdf, 0x3b, 0xf0, 0x0d, 0x8f, 0xf2, 0x8e, 0x89,
	0xc9, 0x14, 0xa0, 0x56, 0xe3, 0xe4, 0x96, 0xa9, 0x7d, 0x0f, 0x54, 0xa1, 0x87, 0xdc, 0xfd, 0x88,
	0x77, 0x4c, 0x0d, 0xd2, 0x30, 0x0c, 0xa7, 0x67, 0x07, 0xe8, 0x71, 0x28, 0x19, 0x16, 0x25, 0x76,
	0xd0, 0x57, 0xaa, 0x28, 0x08, 0x2d, 0x13, 0x3d, 0x0d, 0xd3, 0xf2, 0xa3, 0xb0, 0x5a, 0xaa, 0x57,
	0x11, 0xc4, 0x3d, 0x4e, 0xd3, 0xfe, 0x96, 0x4b, 0x97, 0x6d, 0xb1, 0x19, 0x31, 0xed, 0x2d, 0xc7,
	0x10, 0xd1, 0x2c, 0x25, 0x87, 0x63, 0xb4, 0x99, 0x55, 0x78, 0x47, 0x3c, 0xab, 0x25, 0x4a, 0xef,
	0x17, 0xaa, 0x8d, 0x5b, 0xb2, 0x36, 0x6e, 0x9d, 0x53, 0x1b, 0x1f, 0x31, 0x5f, 0x6e, 0x0d, 0x96,
	0x91, 0x81, 0x93, 0x41, 0x58, 0x5a, 0x72, 0x67, 0x94, 0x96, 0xfc, 0xf9, 0xa5, 0x65, 0x62, 0xb0,
	0xb4, 0xfc, 0x55, 0x81, 0xcb, 0x43, 0xb6, 0x6b, 0x74, 0x0f, 0x66, 0x0d, 0xc7, 0x0e, 0x3c, 0xc7,
	0x6a, 0xbb, 0x16, 0xb6, 0x49, 0xdb, 0x76, 0x4c, 0xbe, 0x11, 0xe5, 0x87, 0xb6, 0x37, 0x62, 0xf6,
	0x36, 0x36, 0x0e, 0xa9, 0xcd, 0x85, 0xe8, 0x33, 0x52, 0xc4, 0x2e, 0x93, 0xb0, 0xc3, 0x04, 0xa0,
	0x16, 0x54, 0xd8, 0xb6, 0x4d, 0x3c, 0x29, 0x70, 0x62, 0x2c, 0x81, 0x65, 0x31, 0x57, 0x88, 0xba,
	0x06, 0x15, 0xec, 0xd2, 0x36, 0xb1, 0x4d, 0xd7, 0xa1, 0x76, 0x20, 0x13, 0xbc, 0x8c, 0x5d, 0xba,
	0x21, 0x49, 0xda, 0x6b, 0x50, 0xdb, 0xea, 0x1d, 0x10, 0xcf, 0x26, 0x01, 0xf1, 0xdf, 0xc5, 0x07,
	0xc4, 0xca, 0x84, 0x78, 0x0e, 0x26, 0x8f, 0xb1, 0xd5, 0x0b, 0x31, 0x16, 0x03, 0xed, 0x57, 0x0a,
	0xcc, 0x0c, 0xa8, 0xc0, 0x22, 0xb0, 0xe7, 0x13, 0x2f, 0x26, 0x23, 0x1a, 0x33, 0xd9, 0x87, 0x8e,
	0x1f, 0x86, 0x34, 0xff, 0xcd, 0x68, 0xae, 0xe3, 0x05, 0xd2, 0x45, 0xfc, 0x77, 0x22, 0x07, 0x27,
	0x52, 0x39, 0xf8, 0x3a, 0x14, 0x2c, 0xa6, 0x28, 0x3b, 0x76, 0x32, 0x68, 0xae, 0x67, 0x42, 0x93,
	0xb2, 0x4a, 0x97, 0x73, 0xb4, 0x3f, 0xe5, 0x01, 0xf1, 0xb3, 0x26, 0xab, 0x70, 0x77, 0xa9, 0x65,
	0x25, 0x3b, 0x49, 0x88, 0x19, 0xbd, 0xd0, 0x6f, 0x5a, 0x85, 0x1d, 0xe1, 0x10, 0x5d, 0x85, 0x12,
	0xe3, 0xf0, 0x5d, 0x6c, 0x84, 0x90, 0xf4, 0x09, 0x0c, 0x2c, 0xda, 0x65, 0xa7, 0xea, 0xb2, 0x00,
	0x8b, 0x0f, 0x98, 0xb4, 0xb0, 0xd0, 0x8a, 0xaa, 0x12, 0x0e, 0x99, 0x9b, 0x42, 0x0b, 0x4e, 0xa8,
	0x29, 0xca, 0x74, 0x51, 0x2f, 0x4b, 0xda, 0x7d, 0x6a, 0x12, 0x74, 0x0b, 0xea, 0xd8, 0x64, 0x01,
	0x1d, 0xad, 0x22, 0xac, 0x2f, 0xe9, 0x35, 0x4e, 0xdf, 0x89, 0xc8, 0x61, 0x07, 0x57, 0xb8, 0x68,
	0x07, 0x37, 0xf5, 0x05, 0x3b, 0xb8, 0xe2, 0xc5, 0xfb, 0xdf, 0xd2, 0x78, 0xfd, 0xef, 0x9b, 0x30,
	0x97, 0xf2, 0x64, 0xf6, 0x5e, 0xbf, 0x00, 0x53, 0x61, 0x9f, 0x23, 0x7c, 0x15, 0x0e, 0xb5, 0x7f,
	0xe7, 0x60, 0x96, 0xd7, 0x17, 0xcb, 0x7a, 0x87, 0x58, 0xdd, 0xe6, 0x21, 0xf6, 0x78, 0x17, 0x3c,
	0xdc, 0xf3, 0x37, 0xa0, 0xea, 0x62, 0xe3, 0x08, 0x77, 0x08, 0xd3, 0xae, 0x23, 0xef, 0x33, 0x4a,
	0xfa, 0xb4, 0xa4, 0x6e, 0x73, 0x22, 0x43, 0xd3, 0x60, 0xc2, 0xce, 0xbc, 0x4d, 0xd8, 0x24, 0x36,
	0xf1, 0xa8, 0x11, 0xad, 0xac, 0x8b, 0x39, 0xa1, 0x07, 0x27, 0x2e, 0xea, 0xc1, 0xc9, 0x2f, 0xe8,
	0xc1, 0xc2, 0xc5, 0x3d, 0x38, 0x35, 0x9e, 0x07, 0x1b, 0x70, 0x29, 0x0d, 0xff, 0xb8, 0x2e, 0xfc,
	0x67, 0x2e, 0xbc, 0x05, 0x19, 0xd1, 0x83, 0x37, 0xa1, 0x16, 0xf3, 0x20, 0xee, 0xbb, 0xb0, 0xda,
	0x77, 0x21, 0xa3, 0xb2, 0x34, 0xee, 0xfb, 0xb0, 0xf4, 0x15, 0x75, 0x4e, 0xf2, 0x86, 0x76, 0x2a,
	0x75, 0x43, 0x9b, 0xf0, 0x5d, 0x71, 0xec, 0xec, 0x4b, 0xe1, 0x3e, 0xae, 0xeb, 0x7e, 0x9d, 0x83,
	0x7a, 0x3a, 0x07, 0x32, 0x77, 0x9f, 0xb3, 0xcb, 0x6d, 0x0b, 0x26, 0x3c, 0xe2, 0x3a, 0x32, 0xd5,
	0x5e, 0x1a, 0x29, 0xd5, 0x56, 0x42, 0x85, 0x1d, 0x9f, 0x06, 0x8e, 0x77, 0xaa, 0x73, 0x11, 0x7d,
	0x97, 0x4f, 0xc4, 0x5d, 0x1e, 0xab, 0xdc, 0x93, 0xc9, 0xca, 0x3d, 0x0f, 0x05, 0xbe, 0x13, 0xfa,
	0xf2, 0x78, 0x2c, 0x47, 0xfc, 0x08, 0xc7, 0xa6, 0xb6, 0x5d, 0x7c, 0x6a, 0x39, 0x58, 0x00, 0x5f,
	0xd1, 0x2b, 0x9c, 0xb8, 0x2b, 0x68, 0xea, 0xcb, 0x50, 0x4b, 0x69, 0x91, 0x71, 0xc3, 0x9e, 0x71,
	0x7d, 0xa3, 0x7d, 0xa6, 0xc0, 0x53, 0x9b, 0x24, 0xd8, 0x77, 0x3b, 0x1e, 0x36, 0xc3, 0x93, 0x49,
	0xac, 0xb7, 0x60, 0xf1, 0x1f, 0x0f, 0x19, 0x65, 0xbc, 0x90, 0xf9, 0x5f, 0x5c, 0xa0, 0x86, 0x66,
	0x4e, 0xc4, 0xcc, 0xbc, 0x03, 0xd7, 0xce, 0xb2, 0x32, 0x3b, 0xda, 0x54, 0x28, 0x4a, 0xe7, 0x84,
	0xdd, 0x71, 0x34, 0xd6, 0x7e, 0x99, 0x83, 0x99, 0xa4, 0xb8, 0xff, 0x0f, 0xa4, 0xce, 0x08, 0xd0,
	0x78, 0x7e, 0x17, 0xc6, 0xcb, 0xef, 0x1b, 0x30, 0x9b, 0x04, 0x2b, 0x13, 0x70, 0xed, 0x8f, 0x05,
	0xa8, 0x37, 0xcc, 0x0f, 0x7a, 0xfe, 0x79, 0x8f, 0x1a, 0xaf, 0xa6, 0xde, 0x78, 0xc6, 0xc7, 0x39,
	0x3f, 0x26, 0xce, 0x7a, 0x88, 0xb3, 0xb0, 0x3c, 0xbb, 0x37, 0x49, 0xeb, 0x9e, 0x24, 0x0c, 0x5c,
	0xf1, 0xdd, 0x4f, 0x5d, 0xf1, 0xbd, 0x71, 0x01, 0xa1, 0x99, 0x77, 0x7e, 0x17, 0xaf, 0xc4, 0xea,
	0xef, 0x15, 0xb8, 0x3c, 0x64, 0x01, 0xd4, 0x84, 0x12, 0x36, 0x4d, 0xd9, 0x4a, 0x28, 0x63, 0xb5,
	0x12, 0x45, 0x6c, 0x9a, 0xa2, 0x8f, 0x78, 0x1f, 0x2a, 0x1e, 0xe9, 0x3a, 0xc7, 0x61, 0x8f, 0x23,
	0xae, 0xd0, 0x47, 0x34, 0x5d, 0x08, 0xd6, 0xf9, 0xfc, 0x44, 0xa7, 0x22, 0x44, 0xf2, 0x15, 0xd4,
	0x65, 0xb8, 0x3c, 0x84, 0x2f, 0x6a, 0x19, 0x94, 0x7e, 0xcb, 0xa0, 0xfe, 0x56, 0x81, 0xb9, 0x2c,
	0x3f, 0xa5, 0x3b, 0x5c, 0xe5, 0xc2, 0x1d, 0xee, 0xe3, 0x50, 0x62, 0xb6, 0xb6, 0x5d, 0xc7, 0xb1,
	0x64, 0xf1, 0x2d, 0x32, 0xc2, 0xae, 0xe3, 0x58, 0xec, 0x23, 0x03, 0x95, 0xf7, 0xf2, 0xb2, 0x6d,
	0x61, 0x60, 0x35, 0x79, 0x6f, 0x7f, 0x2d, 0x02, 0x4b, 0x7c, 0x97, 0x6d, 0xa5, 0xa0, 0x71, 0x96,
	0xb7, 0x10, 0xd4, 0xa3, 0xbb, 0x58, 0xe3, 0x90, 0x9d, 0x18, 0x7d, 0xed, 0x3a, 0xa0, 0x84, 0x45,
	0xd9, 0xd9, 0x16, 0xc0, 0xe5, 0x7d, 0xd7, 0xc4, 0x01, 0x49, 0xc6, 0xfb, 0xb0, 0x9c, 0xfb, 0x72,
	0x6e, 0x5a, 0xb5, 0xe7, 0xe0, 0x4a, 0xd6, 0xaa, 0xd9, 0x2a, 0x3e, 0x8c, 0x98, 0x53, 0x00, 0x0f,
	0x53, 0xf2, 0xcb, 0xba, 0x95, 0xd0, 0x96, 0xe1, 0xf1, 0xec, 0x95, 0x33, 0x15, 0x5d, 0x7a, 0x15,
	0x8a, 0x61, 0xad, 0x41, 0xd3, 0x50, 0xea, 0xd9, 0x26, 0x79, 0x40, 0x6d, 0x62, 0xd6, 0x1f, 0x43,
	0x53, 0xbc, 0xe0, 0xd4, 0x15, 0x54, 0x92, 0x25, 0xa4, 0x9e, 0x43, 0x10, 0x66, 0x7e, 0x3d, 0xbf,
	0xf4, 0x03, 0x98, 0x4e, 0x3c, 0x6b, 0xa0, 0x79, 0x40, 0x7b, 0x77, 0x1b, 0x77, 0xf7, 0xf7, 0xda,
	0xfb, 0x3b, 0x7b, 0xbb, 0x1b, 0xcd, 0xd6, 0xdb, 0xad, 0x8d, 0xf5, 0xfa, 0x63, 0xa8, 0x0e, 0x95,
	0x5d, 0xfd, 0xce, 0xbd, 0xd6, 0x5e, 0xeb, 0xce, 0x4e, 0x6b, 0x67, 0xb3, 0xae, 0xa0, 0x32, 0x4c,
	0xe9, 0xfb, 0x3b, 0x7c, 0x90, 0x43, 0x35, 0x28, 0xeb, 0x1b, 0xcd, 0x3b, 0x3b, 0xcd, 0xd6, 0xbb,
	0x8c, 0x90, 0x47, 0x15, 0x28, 0xee, 0xdd, 0xbd, 0xb3, 0xbb, 0xcb, 0x46, 0x13, 0x6c, 0xf5, 0x0d,
	0x5d, 0xbf, 0xa3, 0xd7, 0x27, 0xd9, 0x87, 0xf5, 0x8d, 0x4d, 0xbd, 0xb1, 0xbe, 0xb1, 0x5e, 0x2f,
	0xdc, 0xfe, 0xfb, 0x34, 0x4c, 0x49, 0x05, 0xd0, 0xc7, 0x30, 0x9d, 0xb8, 0xa2, 0x40, 0x37, 0xce,
	0xbf, 0x83, 0xd9, 0xf6, 0x3b, 0xea, 0xcd, 0xf3, 0xd9, 0x38, 0x6e, 0x9a, 0xfa, 0xa3, 0xbf, 0x7c,
	0xf6, 0xd3, 0xdc, 0x9c, 0x56, 0xe3, 0xff, 0x50, 0x70, 0xfc, 0xb5, 0x55, 0x39, 0x6f, 0x4d, 0x59,
	0x42, 0x0e, 0x40, 0xff, 0xfd, 0x0d, 0x69, 0xc3, 0xee, 0x4d, 0x63, 0xcb, 0x5e, 0x3f, 0x87, 0x47,
	0xac, 0x79, 0x99, 0xaf, 0x39, 0x83, 0xd2, 0x6b, 0xa2, 0x87, 0x30, 0x9d, 0x78, 0xf3, 0x1c, 0x62,
	0x6d, 0xfa, 0xa5, 0x78, 0x88, 0xb5, 0x83, 0xcf, 0xa7, 0xe1, 0xca, 0x4b, 0x03, 0x2b, 0x3f, 0x52,
	0x52, 0x19, 0x2a, 0x6a, 0xe3, 0x8d, 0x91, 0xaa, 0xe0, 0x90, 0xf5, 0x07, 0x33, 0x3e, 0x44, 0x5b,
	0xcd, 0x42, 0xfb, 0x91, 0x02, 0xd5, 0xe4, 0x73, 0x27, 0x7a, 0xe6, 0x1c, 0x38, 0xe5, 0xbb, 0xae,
	0xfa, 0xec, 0x08, 0x7c, 0x42, 0x81, 0xab, 0x5c, 0x81, 0x79, 0x34, 0x97, 0x52, 0x60, 0xd5, 0x62,
	0xeb, 0x3d, 0x52, 0xa0, 0x96, 0x6a, 0xba, 0xd1, 0xcd, 0xe1, 0xfb, 0x78, 0xe2, 0x92, 0x45, 0xbd,
	0x35, 0x0a, 0xa3, 0xd0, 0xe2, 0x0a, 0xd7, 0x62, 0x56, 0xab, 0x86, 0x5a, 0x04, 0xfc, 0x23, 0x43,
	0xe1, 0x87, 0x0a, 0xd4, 0xd3, 0x5d, 0x23, 0xca, 0xb6, 0x2f, 0xa3, 0xb7, 0x57, 0x97, 0x46, 0xe2,
	0x4c, 0x04, 0x83, 0x56, 0x09, 0xb5, 0x38, 0x24, 0x56, 0x97, 0xe9, 0xf0, 0x31, 0xd4, 0x52, 0xcd,
	0x0f, 0x3a, 0x2b, 0xc2, 0x12, 0x0a, 0xdc, 0x1a, 0x85, 0x51, 0xac, 0x3f, 0xc7, 0xd7, 0xaf, 0x2e,
	0x25, 0xd6, 0x47, 0x1f, 0xc1, 0xa5, 0xfe, 0x5b, 0x44, 0xfc, 0x4d, 0x41, 0x3b, 0xe7, 0xdd, 0xe2,
	0xcc, 0xfc, 0x8b, 0xbf, 0x6d, 0x0c, 0xe6, 0x5f, 0x78, 0xa0, 0xfc, 0x54, 0x81, 0xab, 0x67, 0x9d,
	0xca, 0xd1, 0xd7, 0x87, 0xc9, 0x3f, 0xab, 0x5d, 0x51, 0xbf, 0x31, 0xf6, 0x2c, 0xa1, 0xe7, 0x53,
	0x5c, 0xcf, 0x2b, 0xe8, 0x72, 0x3a, 0x58, 0x7b, 0x62, 0x1e, 0xfa, 0x44, 0x81, 0x6a, 0x52, 0xc6,
	0x90, 0x94, 0x19, 0x68, 0x0c, 0x86, 0xa4, 0x4c, 0xc6, 0x99, 0x58, 0xd3, 0xb8, 0x16, 0x57, 0xd5,
	0x61, 0x5a, 0xb0, 0x88, 0xf9, 0xb9, 0x02, 0x73, 0x59, 0x9b, 0x28, 0x7a, 0x7e, 0xc8, 0x32, 0x99,
	0xbb, 0xbc, 0xba, 0x32, 0x32, 0xf7, 0x30, 0xd5, 0xfa, 0x1c, 0xab, 0xf8, 0xc4, 0x67, 0xaa, 0xfd,
	0x42, 0x81, 0xf9, 0xec, 0x8d, 0x13, 0x9d, 0xb9, 0xdc, 0xe0, 0xfe, 0xae, 0xbe, 0x30, 0x06, 0xbf,
	0x50, 0xf0, 0x3a, 0x57, 0xf0, 0x49, 0xf5, 0x4a, 0xa6, 0x82, 0x6c, 0xca, 0x9a, 0xb2, 0xf4, 0xd6,
	0xe7, 0xca, 0x4f, 0x1a, 0xff, 0x52, 0xd0, 0x29, 0xcc, 0x4a, 0xe0, 0x17, 0xe5, 0x2d, 0xcd, 0x62,
	0x63, 0xb7, 0xa5, 0xbd, 0x07, 0x95, 0x3d, 0xdc, 0xf5, 0x7b, 0x76, 0x67, 0xb1, 0xb9, 0xd3, 0xbc,
	0x8b, 0x5e, 0x3c, 0x0c, 0x02, 0xd7, 0x5f, 0x5b, 0x5d, 0xed, 0xd0, 0xe0, 0xb0, 0x77, 0xb0, 0x62,
	0x38, 0xdd, 0x55, 0x5f, 0x30, 0x2c, 0x1b, 0xb6, 0x11, 0x84, 0xfe, 0x59, 0x96, 0x4a, 0x2e, 0x63,
	0x97, 0xaa, 0x97, 0xf8, 0x45, 0xea, 0x9b, 0x71, 0xbe, 0x15, 0xea, 0xdc, 0x2e, 0x1c, 0xbf, 0xb0,
	0x72, 0x7b, 0xe5, 0x85, 0xa5, 0x5c, 0x4e, 0xb9, 0x5d, 0xc7, 0xae, 0x6b, 0x51, 0xf1, 0x98, 0xb2,
	0xfa, 0x81, 0xef, 0xd8, 0x6b, 0x03, 0x14, 0x6f, 0x1f, 0x9e, 0xdc, 0x76, 0x3c, 0xb2, 0x88, 0x0f,
	0x9c, 0x5e, 0xb0, 0x98, 0xa1, 0xed, 0x85, 0xb4, 0x3b, 0x28, 0xf0, 0x7f, 0xc7, 0x7b, 0xf1, 0x3f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x6e, 0x72, 0x3f, 0x88, 0xfc, 0x27, 0x00, 0x00,
}
